// source: nord.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.nord.Action', null, global);
goog.exportSymbol('proto.nord.Action.CancelOrderById', null, global);
goog.exportSymbol('proto.nord.Action.CreateMarket', null, global);
goog.exportSymbol('proto.nord.Action.CreateSession', null, global);
goog.exportSymbol('proto.nord.Action.CreateToken', null, global);
goog.exportSymbol('proto.nord.Action.Deposit', null, global);
goog.exportSymbol('proto.nord.Action.KindCase', null, global);
goog.exportSymbol('proto.nord.Action.PlaceOrder', null, global);
goog.exportSymbol('proto.nord.Action.PythPriceFeedUpdate', null, global);
goog.exportSymbol('proto.nord.Action.PythSetSymbolFeed', null, global);
goog.exportSymbol('proto.nord.Action.PythSetWormholeGuardians', null, global);
goog.exportSymbol('proto.nord.Action.Withdraw', null, global);
goog.exportSymbol('proto.nord.Error', null, global);
goog.exportSymbol('proto.nord.FillMode', null, global);
goog.exportSymbol('proto.nord.Market', null, global);
goog.exportSymbol('proto.nord.MarketType', null, global);
goog.exportSymbol('proto.nord.Receipt', null, global);
goog.exportSymbol('proto.nord.Receipt.CancelOrderResult', null, global);
goog.exportSymbol('proto.nord.Receipt.CreateSessionResult', null, global);
goog.exportSymbol('proto.nord.Receipt.DepositResult', null, global);
goog.exportSymbol('proto.nord.Receipt.InsertMarketResult', null, global);
goog.exportSymbol('proto.nord.Receipt.InsertTokenResult', null, global);
goog.exportSymbol('proto.nord.Receipt.KindCase', null, global);
goog.exportSymbol('proto.nord.Receipt.OracleSymbolFeedResult', null, global);
goog.exportSymbol('proto.nord.Receipt.OracleUpdateResult', null, global);
goog.exportSymbol('proto.nord.Receipt.PlaceOrderResult', null, global);
goog.exportSymbol('proto.nord.Receipt.Posted', null, global);
goog.exportSymbol('proto.nord.Receipt.Trade', null, global);
goog.exportSymbol('proto.nord.Receipt.UpdateGuardianSetResult', null, global);
goog.exportSymbol('proto.nord.Receipt.WithdrawResult', null, global);
goog.exportSymbol('proto.nord.Side', null, global);
goog.exportSymbol('proto.nord.Token', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Market = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Market, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Market.displayName = 'proto.nord.Market';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Token = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Token.displayName = 'proto.nord.Token';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nord.Action.oneofGroups_);
};
goog.inherits(proto.nord.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Action.displayName = 'proto.nord.Action';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Action.CreateSession = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Action.CreateSession, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Action.CreateSession.displayName = 'proto.nord.Action.CreateSession';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Action.CreateToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Action.CreateToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Action.CreateToken.displayName = 'proto.nord.Action.CreateToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Action.CreateMarket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Action.CreateMarket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Action.CreateMarket.displayName = 'proto.nord.Action.CreateMarket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Action.PlaceOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Action.PlaceOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Action.PlaceOrder.displayName = 'proto.nord.Action.PlaceOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Action.CancelOrderById = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Action.CancelOrderById, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Action.CancelOrderById.displayName = 'proto.nord.Action.CancelOrderById';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Action.Deposit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Action.Deposit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Action.Deposit.displayName = 'proto.nord.Action.Deposit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Action.Withdraw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Action.Withdraw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Action.Withdraw.displayName = 'proto.nord.Action.Withdraw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Action.PythSetWormholeGuardians = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nord.Action.PythSetWormholeGuardians.repeatedFields_, null);
};
goog.inherits(proto.nord.Action.PythSetWormholeGuardians, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Action.PythSetWormholeGuardians.displayName = 'proto.nord.Action.PythSetWormholeGuardians';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Action.PythSetSymbolFeed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Action.PythSetSymbolFeed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Action.PythSetSymbolFeed.displayName = 'proto.nord.Action.PythSetSymbolFeed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Action.PythPriceFeedUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Action.PythPriceFeedUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Action.PythPriceFeedUpdate.displayName = 'proto.nord.Action.PythPriceFeedUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nord.Receipt.oneofGroups_);
};
goog.inherits(proto.nord.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Receipt.displayName = 'proto.nord.Receipt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Receipt.Posted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Receipt.Posted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Receipt.Posted.displayName = 'proto.nord.Receipt.Posted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Receipt.Trade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Receipt.Trade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Receipt.Trade.displayName = 'proto.nord.Receipt.Trade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Receipt.CreateSessionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Receipt.CreateSessionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Receipt.CreateSessionResult.displayName = 'proto.nord.Receipt.CreateSessionResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Receipt.PlaceOrderResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nord.Receipt.PlaceOrderResult.repeatedFields_, null);
};
goog.inherits(proto.nord.Receipt.PlaceOrderResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Receipt.PlaceOrderResult.displayName = 'proto.nord.Receipt.PlaceOrderResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Receipt.CancelOrderResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Receipt.CancelOrderResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Receipt.CancelOrderResult.displayName = 'proto.nord.Receipt.CancelOrderResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Receipt.DepositResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Receipt.DepositResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Receipt.DepositResult.displayName = 'proto.nord.Receipt.DepositResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Receipt.InsertTokenResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Receipt.InsertTokenResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Receipt.InsertTokenResult.displayName = 'proto.nord.Receipt.InsertTokenResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Receipt.InsertMarketResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Receipt.InsertMarketResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Receipt.InsertMarketResult.displayName = 'proto.nord.Receipt.InsertMarketResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Receipt.WithdrawResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Receipt.WithdrawResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Receipt.WithdrawResult.displayName = 'proto.nord.Receipt.WithdrawResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Receipt.OracleSymbolFeedResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Receipt.OracleSymbolFeedResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Receipt.OracleSymbolFeedResult.displayName = 'proto.nord.Receipt.OracleSymbolFeedResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Receipt.OracleUpdateResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nord.Receipt.OracleUpdateResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Receipt.OracleUpdateResult.displayName = 'proto.nord.Receipt.OracleUpdateResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nord.Receipt.UpdateGuardianSetResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nord.Receipt.UpdateGuardianSetResult.repeatedFields_, null);
};
goog.inherits(proto.nord.Receipt.UpdateGuardianSetResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nord.Receipt.UpdateGuardianSetResult.displayName = 'proto.nord.Receipt.UpdateGuardianSetResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Market.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Market.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Market} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Market.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    priceDecimals: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sizeDecimals: jspb.Message.getFieldWithDefault(msg, 3, 0),
    baseTokenId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    marketType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    imfBps: jspb.Message.getFieldWithDefault(msg, 6, 0),
    cmfBps: jspb.Message.getFieldWithDefault(msg, 7, 0),
    mmfBps: jspb.Message.getFieldWithDefault(msg, 8, 0),
    symbol: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Market}
 */
proto.nord.Market.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Market;
  return proto.nord.Market.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Market} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Market}
 */
proto.nord.Market.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPriceDecimals(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSizeDecimals(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBaseTokenId(value);
      break;
    case 5:
      var value = /** @type {!proto.nord.MarketType} */ (reader.readEnum());
      msg.setMarketType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setImfBps(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCmfBps(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMmfBps(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Market.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Market.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Market} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Market.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPriceDecimals();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSizeDecimals();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getBaseTokenId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMarketType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getImfBps();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getCmfBps();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getMmfBps();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional uint32 market_id = 1;
 * @return {number}
 */
proto.nord.Market.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Market} returns this
 */
proto.nord.Market.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 price_decimals = 2;
 * @return {number}
 */
proto.nord.Market.prototype.getPriceDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Market} returns this
 */
proto.nord.Market.prototype.setPriceDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 size_decimals = 3;
 * @return {number}
 */
proto.nord.Market.prototype.getSizeDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Market} returns this
 */
proto.nord.Market.prototype.setSizeDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 base_token_id = 4;
 * @return {number}
 */
proto.nord.Market.prototype.getBaseTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Market} returns this
 */
proto.nord.Market.prototype.setBaseTokenId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional MarketType market_type = 5;
 * @return {!proto.nord.MarketType}
 */
proto.nord.Market.prototype.getMarketType = function() {
  return /** @type {!proto.nord.MarketType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.nord.MarketType} value
 * @return {!proto.nord.Market} returns this
 */
proto.nord.Market.prototype.setMarketType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional uint32 imf_bps = 6;
 * @return {number}
 */
proto.nord.Market.prototype.getImfBps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Market} returns this
 */
proto.nord.Market.prototype.setImfBps = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 cmf_bps = 7;
 * @return {number}
 */
proto.nord.Market.prototype.getCmfBps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Market} returns this
 */
proto.nord.Market.prototype.setCmfBps = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 mmf_bps = 8;
 * @return {number}
 */
proto.nord.Market.prototype.getMmfBps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Market} returns this
 */
proto.nord.Market.prototype.setMmfBps = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string symbol = 10;
 * @return {string}
 */
proto.nord.Market.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.nord.Market} returns this
 */
proto.nord.Market.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Token.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Token.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Token} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Token.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    decimals: jspb.Message.getFieldWithDefault(msg, 2, 0),
    weightBps: jspb.Message.getFieldWithDefault(msg, 3, 0),
    symbol: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Token}
 */
proto.nord.Token.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Token;
  return proto.nord.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Token}
 */
proto.nord.Token.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTokenId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimals(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeightBps(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Token.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Token.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Token.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getWeightBps();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 token_id = 1;
 * @return {number}
 */
proto.nord.Token.prototype.getTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Token} returns this
 */
proto.nord.Token.prototype.setTokenId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 decimals = 2;
 * @return {number}
 */
proto.nord.Token.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Token} returns this
 */
proto.nord.Token.prototype.setDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 weight_bps = 3;
 * @return {number}
 */
proto.nord.Token.prototype.getWeightBps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Token} returns this
 */
proto.nord.Token.prototype.setWeightBps = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string symbol = 4;
 * @return {string}
 */
proto.nord.Token.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nord.Token} returns this
 */
proto.nord.Token.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nord.Action.oneofGroups_ = [[4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.nord.Action.KindCase = {
  KIND_NOT_SET: 0,
  CREATE_SESSION: 4,
  CREATE_TOKEN: 5,
  CREATE_MARKET: 6,
  PLACE_ORDER: 7,
  CANCEL_ORDER_BY_ID: 8,
  DEPOSIT: 9,
  WITHDRAW: 10,
  PYTH_SET_WORMHOLE_GUARDIANS: 11,
  PYTH_SET_SYMBOL_FEED: 12,
  PYTH_PRICE_FEED_UPDATE: 13
};

/**
 * @return {proto.nord.Action.KindCase}
 */
proto.nord.Action.prototype.getKindCase = function() {
  return /** @type {proto.nord.Action.KindCase} */(jspb.Message.computeOneofCase(this, proto.nord.Action.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentTimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    createSession: (f = msg.getCreateSession()) && proto.nord.Action.CreateSession.toObject(includeInstance, f),
    createToken: (f = msg.getCreateToken()) && proto.nord.Action.CreateToken.toObject(includeInstance, f),
    createMarket: (f = msg.getCreateMarket()) && proto.nord.Action.CreateMarket.toObject(includeInstance, f),
    placeOrder: (f = msg.getPlaceOrder()) && proto.nord.Action.PlaceOrder.toObject(includeInstance, f),
    cancelOrderById: (f = msg.getCancelOrderById()) && proto.nord.Action.CancelOrderById.toObject(includeInstance, f),
    deposit: (f = msg.getDeposit()) && proto.nord.Action.Deposit.toObject(includeInstance, f),
    withdraw: (f = msg.getWithdraw()) && proto.nord.Action.Withdraw.toObject(includeInstance, f),
    pythSetWormholeGuardians: (f = msg.getPythSetWormholeGuardians()) && proto.nord.Action.PythSetWormholeGuardians.toObject(includeInstance, f),
    pythSetSymbolFeed: (f = msg.getPythSetSymbolFeed()) && proto.nord.Action.PythSetSymbolFeed.toObject(includeInstance, f),
    pythPriceFeedUpdate: (f = msg.getPythPriceFeedUpdate()) && proto.nord.Action.PythPriceFeedUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Action}
 */
proto.nord.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Action;
  return proto.nord.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Action}
 */
proto.nord.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNonce(value);
      break;
    case 4:
      var value = new proto.nord.Action.CreateSession;
      reader.readMessage(value,proto.nord.Action.CreateSession.deserializeBinaryFromReader);
      msg.setCreateSession(value);
      break;
    case 5:
      var value = new proto.nord.Action.CreateToken;
      reader.readMessage(value,proto.nord.Action.CreateToken.deserializeBinaryFromReader);
      msg.setCreateToken(value);
      break;
    case 6:
      var value = new proto.nord.Action.CreateMarket;
      reader.readMessage(value,proto.nord.Action.CreateMarket.deserializeBinaryFromReader);
      msg.setCreateMarket(value);
      break;
    case 7:
      var value = new proto.nord.Action.PlaceOrder;
      reader.readMessage(value,proto.nord.Action.PlaceOrder.deserializeBinaryFromReader);
      msg.setPlaceOrder(value);
      break;
    case 8:
      var value = new proto.nord.Action.CancelOrderById;
      reader.readMessage(value,proto.nord.Action.CancelOrderById.deserializeBinaryFromReader);
      msg.setCancelOrderById(value);
      break;
    case 9:
      var value = new proto.nord.Action.Deposit;
      reader.readMessage(value,proto.nord.Action.Deposit.deserializeBinaryFromReader);
      msg.setDeposit(value);
      break;
    case 10:
      var value = new proto.nord.Action.Withdraw;
      reader.readMessage(value,proto.nord.Action.Withdraw.deserializeBinaryFromReader);
      msg.setWithdraw(value);
      break;
    case 11:
      var value = new proto.nord.Action.PythSetWormholeGuardians;
      reader.readMessage(value,proto.nord.Action.PythSetWormholeGuardians.deserializeBinaryFromReader);
      msg.setPythSetWormholeGuardians(value);
      break;
    case 12:
      var value = new proto.nord.Action.PythSetSymbolFeed;
      reader.readMessage(value,proto.nord.Action.PythSetSymbolFeed.deserializeBinaryFromReader);
      msg.setPythSetSymbolFeed(value);
      break;
    case 13:
      var value = new proto.nord.Action.PythPriceFeedUpdate;
      reader.readMessage(value,proto.nord.Action.PythPriceFeedUpdate.deserializeBinaryFromReader);
      msg.setPythPriceFeedUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCreateSession();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nord.Action.CreateSession.serializeBinaryToWriter
    );
  }
  f = message.getCreateToken();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.nord.Action.CreateToken.serializeBinaryToWriter
    );
  }
  f = message.getCreateMarket();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.nord.Action.CreateMarket.serializeBinaryToWriter
    );
  }
  f = message.getPlaceOrder();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.nord.Action.PlaceOrder.serializeBinaryToWriter
    );
  }
  f = message.getCancelOrderById();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.nord.Action.CancelOrderById.serializeBinaryToWriter
    );
  }
  f = message.getDeposit();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.nord.Action.Deposit.serializeBinaryToWriter
    );
  }
  f = message.getWithdraw();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nord.Action.Withdraw.serializeBinaryToWriter
    );
  }
  f = message.getPythSetWormholeGuardians();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.nord.Action.PythSetWormholeGuardians.serializeBinaryToWriter
    );
  }
  f = message.getPythSetSymbolFeed();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.nord.Action.PythSetSymbolFeed.serializeBinaryToWriter
    );
  }
  f = message.getPythPriceFeedUpdate();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.nord.Action.PythPriceFeedUpdate.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Action.CreateSession.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Action.CreateSession.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Action.CreateSession} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.CreateSession.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    blstPubkey: msg.getBlstPubkey_asB64(),
    expiryTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Action.CreateSession}
 */
proto.nord.Action.CreateSession.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Action.CreateSession;
  return proto.nord.Action.CreateSession.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Action.CreateSession} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Action.CreateSession}
 */
proto.nord.Action.CreateSession.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlstPubkey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiryTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Action.CreateSession.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Action.CreateSession.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Action.CreateSession} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.CreateSession.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBlstPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getExpiryTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional uint32 user_id = 1;
 * @return {number}
 */
proto.nord.Action.CreateSession.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.CreateSession} returns this
 */
proto.nord.Action.CreateSession.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes blst_pubkey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.nord.Action.CreateSession.prototype.getBlstPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes blst_pubkey = 2;
 * This is a type-conversion wrapper around `getBlstPubkey()`
 * @return {string}
 */
proto.nord.Action.CreateSession.prototype.getBlstPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlstPubkey()));
};


/**
 * optional bytes blst_pubkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlstPubkey()`
 * @return {!Uint8Array}
 */
proto.nord.Action.CreateSession.prototype.getBlstPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlstPubkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nord.Action.CreateSession} returns this
 */
proto.nord.Action.CreateSession.prototype.setBlstPubkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int64 expiry_timestamp = 3;
 * @return {number}
 */
proto.nord.Action.CreateSession.prototype.getExpiryTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.CreateSession} returns this
 */
proto.nord.Action.CreateSession.prototype.setExpiryTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Action.CreateToken.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Action.CreateToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Action.CreateToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.CreateToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    decimals: jspb.Message.getFieldWithDefault(msg, 1, 0),
    weightBps: jspb.Message.getFieldWithDefault(msg, 3, 0),
    symbol: jspb.Message.getFieldWithDefault(msg, 4, ""),
    oracleSymbol: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ethAddr: msg.getEthAddr_asB64(),
    minWithdrawAmount: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Action.CreateToken}
 */
proto.nord.Action.CreateToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Action.CreateToken;
  return proto.nord.Action.CreateToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Action.CreateToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Action.CreateToken}
 */
proto.nord.Action.CreateToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimals(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeightBps(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleSymbol(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEthAddr(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinWithdrawAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Action.CreateToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Action.CreateToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Action.CreateToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.CreateToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getWeightBps();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOracleSymbol();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEthAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getMinWithdrawAmount();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional uint32 decimals = 1;
 * @return {number}
 */
proto.nord.Action.CreateToken.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.CreateToken} returns this
 */
proto.nord.Action.CreateToken.prototype.setDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 weight_bps = 3;
 * @return {number}
 */
proto.nord.Action.CreateToken.prototype.getWeightBps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.CreateToken} returns this
 */
proto.nord.Action.CreateToken.prototype.setWeightBps = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string symbol = 4;
 * @return {string}
 */
proto.nord.Action.CreateToken.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nord.Action.CreateToken} returns this
 */
proto.nord.Action.CreateToken.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string oracle_symbol = 5;
 * @return {string}
 */
proto.nord.Action.CreateToken.prototype.getOracleSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nord.Action.CreateToken} returns this
 */
proto.nord.Action.CreateToken.prototype.setOracleSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes eth_addr = 6;
 * @return {!(string|Uint8Array)}
 */
proto.nord.Action.CreateToken.prototype.getEthAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes eth_addr = 6;
 * This is a type-conversion wrapper around `getEthAddr()`
 * @return {string}
 */
proto.nord.Action.CreateToken.prototype.getEthAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEthAddr()));
};


/**
 * optional bytes eth_addr = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEthAddr()`
 * @return {!Uint8Array}
 */
proto.nord.Action.CreateToken.prototype.getEthAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEthAddr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nord.Action.CreateToken} returns this
 */
proto.nord.Action.CreateToken.prototype.setEthAddr = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional uint64 min_withdraw_amount = 7;
 * @return {number}
 */
proto.nord.Action.CreateToken.prototype.getMinWithdrawAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.CreateToken} returns this
 */
proto.nord.Action.CreateToken.prototype.setMinWithdrawAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Action.CreateMarket.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Action.CreateMarket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Action.CreateMarket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.CreateMarket.toObject = function(includeInstance, msg) {
  var f, obj = {
    decimals: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tickSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    imfBps: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cmfBps: jspb.Message.getFieldWithDefault(msg, 4, 0),
    mmfBps: jspb.Message.getFieldWithDefault(msg, 5, 0),
    marketType: jspb.Message.getFieldWithDefault(msg, 6, 0),
    symbol: jspb.Message.getFieldWithDefault(msg, 7, ""),
    oracleSymbol: jspb.Message.getFieldWithDefault(msg, 8, ""),
    baseTokenId: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Action.CreateMarket}
 */
proto.nord.Action.CreateMarket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Action.CreateMarket;
  return proto.nord.Action.CreateMarket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Action.CreateMarket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Action.CreateMarket}
 */
proto.nord.Action.CreateMarket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimals(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTickSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setImfBps(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCmfBps(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMmfBps(value);
      break;
    case 6:
      var value = /** @type {!proto.nord.MarketType} */ (reader.readEnum());
      msg.setMarketType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleSymbol(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBaseTokenId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Action.CreateMarket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Action.CreateMarket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Action.CreateMarket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.CreateMarket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTickSize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getImfBps();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCmfBps();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMmfBps();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getMarketType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOracleSymbol();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBaseTokenId();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * optional uint32 decimals = 1;
 * @return {number}
 */
proto.nord.Action.CreateMarket.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.CreateMarket} returns this
 */
proto.nord.Action.CreateMarket.prototype.setDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 tick_size = 2;
 * @return {number}
 */
proto.nord.Action.CreateMarket.prototype.getTickSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.CreateMarket} returns this
 */
proto.nord.Action.CreateMarket.prototype.setTickSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 imf_bps = 3;
 * @return {number}
 */
proto.nord.Action.CreateMarket.prototype.getImfBps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.CreateMarket} returns this
 */
proto.nord.Action.CreateMarket.prototype.setImfBps = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 cmf_bps = 4;
 * @return {number}
 */
proto.nord.Action.CreateMarket.prototype.getCmfBps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.CreateMarket} returns this
 */
proto.nord.Action.CreateMarket.prototype.setCmfBps = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 mmf_bps = 5;
 * @return {number}
 */
proto.nord.Action.CreateMarket.prototype.getMmfBps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.CreateMarket} returns this
 */
proto.nord.Action.CreateMarket.prototype.setMmfBps = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional MarketType market_type = 6;
 * @return {!proto.nord.MarketType}
 */
proto.nord.Action.CreateMarket.prototype.getMarketType = function() {
  return /** @type {!proto.nord.MarketType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.nord.MarketType} value
 * @return {!proto.nord.Action.CreateMarket} returns this
 */
proto.nord.Action.CreateMarket.prototype.setMarketType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional string symbol = 7;
 * @return {string}
 */
proto.nord.Action.CreateMarket.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.nord.Action.CreateMarket} returns this
 */
proto.nord.Action.CreateMarket.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string oracle_symbol = 8;
 * @return {string}
 */
proto.nord.Action.CreateMarket.prototype.getOracleSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.nord.Action.CreateMarket} returns this
 */
proto.nord.Action.CreateMarket.prototype.setOracleSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint32 base_token_id = 9;
 * @return {number}
 */
proto.nord.Action.CreateMarket.prototype.getBaseTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.CreateMarket} returns this
 */
proto.nord.Action.CreateMarket.prototype.setBaseTokenId = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Action.PlaceOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Action.PlaceOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Action.PlaceOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.PlaceOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    marketId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    side: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fillMode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isReduceOnly: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    price: jspb.Message.getFieldWithDefault(msg, 6, 0),
    size: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Action.PlaceOrder}
 */
proto.nord.Action.PlaceOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Action.PlaceOrder;
  return proto.nord.Action.PlaceOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Action.PlaceOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Action.PlaceOrder}
 */
proto.nord.Action.PlaceOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMarketId(value);
      break;
    case 3:
      var value = /** @type {!proto.nord.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 4:
      var value = /** @type {!proto.nord.FillMode} */ (reader.readEnum());
      msg.setFillMode(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsReduceOnly(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Action.PlaceOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Action.PlaceOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Action.PlaceOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.PlaceOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getFillMode();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getIsReduceOnly();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional uint64 session_id = 1;
 * @return {number}
 */
proto.nord.Action.PlaceOrder.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.PlaceOrder} returns this
 */
proto.nord.Action.PlaceOrder.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 market_id = 2;
 * @return {number}
 */
proto.nord.Action.PlaceOrder.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.PlaceOrder} returns this
 */
proto.nord.Action.PlaceOrder.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Side side = 3;
 * @return {!proto.nord.Side}
 */
proto.nord.Action.PlaceOrder.prototype.getSide = function() {
  return /** @type {!proto.nord.Side} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.nord.Side} value
 * @return {!proto.nord.Action.PlaceOrder} returns this
 */
proto.nord.Action.PlaceOrder.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional FillMode fill_mode = 4;
 * @return {!proto.nord.FillMode}
 */
proto.nord.Action.PlaceOrder.prototype.getFillMode = function() {
  return /** @type {!proto.nord.FillMode} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.nord.FillMode} value
 * @return {!proto.nord.Action.PlaceOrder} returns this
 */
proto.nord.Action.PlaceOrder.prototype.setFillMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool is_reduce_only = 5;
 * @return {boolean}
 */
proto.nord.Action.PlaceOrder.prototype.getIsReduceOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nord.Action.PlaceOrder} returns this
 */
proto.nord.Action.PlaceOrder.prototype.setIsReduceOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint64 price = 6;
 * @return {number}
 */
proto.nord.Action.PlaceOrder.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.PlaceOrder} returns this
 */
proto.nord.Action.PlaceOrder.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 size = 7;
 * @return {number}
 */
proto.nord.Action.PlaceOrder.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.PlaceOrder} returns this
 */
proto.nord.Action.PlaceOrder.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Action.CancelOrderById.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Action.CancelOrderById.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Action.CancelOrderById} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.CancelOrderById.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    orderId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Action.CancelOrderById}
 */
proto.nord.Action.CancelOrderById.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Action.CancelOrderById;
  return proto.nord.Action.CancelOrderById.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Action.CancelOrderById} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Action.CancelOrderById}
 */
proto.nord.Action.CancelOrderById.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Action.CancelOrderById.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Action.CancelOrderById.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Action.CancelOrderById} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.CancelOrderById.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOrderId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 session_id = 1;
 * @return {number}
 */
proto.nord.Action.CancelOrderById.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.CancelOrderById} returns this
 */
proto.nord.Action.CancelOrderById.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 order_id = 2;
 * @return {number}
 */
proto.nord.Action.CancelOrderById.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.CancelOrderById} returns this
 */
proto.nord.Action.CancelOrderById.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Action.Deposit.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Action.Deposit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Action.Deposit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.Deposit.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionNonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tokenId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userSecp256k1Pubkey: msg.getUserSecp256k1Pubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Action.Deposit}
 */
proto.nord.Action.Deposit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Action.Deposit;
  return proto.nord.Action.Deposit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Action.Deposit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Action.Deposit}
 */
proto.nord.Action.Deposit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setActionNonce(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTokenId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUserSecp256k1Pubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Action.Deposit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Action.Deposit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Action.Deposit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.Deposit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTokenId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getUserSecp256k1Pubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional uint64 action_nonce = 1;
 * @return {number}
 */
proto.nord.Action.Deposit.prototype.getActionNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.Deposit} returns this
 */
proto.nord.Action.Deposit.prototype.setActionNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 token_id = 2;
 * @return {number}
 */
proto.nord.Action.Deposit.prototype.getTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.Deposit} returns this
 */
proto.nord.Action.Deposit.prototype.setTokenId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.nord.Action.Deposit.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.Deposit} returns this
 */
proto.nord.Action.Deposit.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes user_secp256k1_pubkey = 4;
 * @return {!(string|Uint8Array)}
 */
proto.nord.Action.Deposit.prototype.getUserSecp256k1Pubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes user_secp256k1_pubkey = 4;
 * This is a type-conversion wrapper around `getUserSecp256k1Pubkey()`
 * @return {string}
 */
proto.nord.Action.Deposit.prototype.getUserSecp256k1Pubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUserSecp256k1Pubkey()));
};


/**
 * optional bytes user_secp256k1_pubkey = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUserSecp256k1Pubkey()`
 * @return {!Uint8Array}
 */
proto.nord.Action.Deposit.prototype.getUserSecp256k1Pubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUserSecp256k1Pubkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nord.Action.Deposit} returns this
 */
proto.nord.Action.Deposit.prototype.setUserSecp256k1Pubkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Action.Withdraw.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Action.Withdraw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Action.Withdraw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.Withdraw.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Action.Withdraw}
 */
proto.nord.Action.Withdraw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Action.Withdraw;
  return proto.nord.Action.Withdraw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Action.Withdraw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Action.Withdraw}
 */
proto.nord.Action.Withdraw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTokenId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Action.Withdraw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Action.Withdraw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Action.Withdraw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.Withdraw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint32 token_id = 1;
 * @return {number}
 */
proto.nord.Action.Withdraw.prototype.getTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.Withdraw} returns this
 */
proto.nord.Action.Withdraw.prototype.setTokenId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 user_id = 2;
 * @return {number}
 */
proto.nord.Action.Withdraw.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.Withdraw} returns this
 */
proto.nord.Action.Withdraw.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.nord.Action.Withdraw.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.Withdraw} returns this
 */
proto.nord.Action.Withdraw.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nord.Action.PythSetWormholeGuardians.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Action.PythSetWormholeGuardians.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Action.PythSetWormholeGuardians.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Action.PythSetWormholeGuardians} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.PythSetWormholeGuardians.toObject = function(includeInstance, msg) {
  var f, obj = {
    guardianSetIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    addressesList: msg.getAddressesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Action.PythSetWormholeGuardians}
 */
proto.nord.Action.PythSetWormholeGuardians.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Action.PythSetWormholeGuardians;
  return proto.nord.Action.PythSetWormholeGuardians.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Action.PythSetWormholeGuardians} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Action.PythSetWormholeGuardians}
 */
proto.nord.Action.PythSetWormholeGuardians.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGuardianSetIndex(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAddresses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Action.PythSetWormholeGuardians.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Action.PythSetWormholeGuardians.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Action.PythSetWormholeGuardians} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.PythSetWormholeGuardians.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuardianSetIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAddressesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 guardian_set_index = 1;
 * @return {number}
 */
proto.nord.Action.PythSetWormholeGuardians.prototype.getGuardianSetIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action.PythSetWormholeGuardians} returns this
 */
proto.nord.Action.PythSetWormholeGuardians.prototype.setGuardianSetIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated bytes addresses = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.nord.Action.PythSetWormholeGuardians.prototype.getAddressesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes addresses = 2;
 * This is a type-conversion wrapper around `getAddressesList()`
 * @return {!Array<string>}
 */
proto.nord.Action.PythSetWormholeGuardians.prototype.getAddressesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAddressesList()));
};


/**
 * repeated bytes addresses = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddressesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.nord.Action.PythSetWormholeGuardians.prototype.getAddressesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAddressesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.nord.Action.PythSetWormholeGuardians} returns this
 */
proto.nord.Action.PythSetWormholeGuardians.prototype.setAddressesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.nord.Action.PythSetWormholeGuardians} returns this
 */
proto.nord.Action.PythSetWormholeGuardians.prototype.addAddresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nord.Action.PythSetWormholeGuardians} returns this
 */
proto.nord.Action.PythSetWormholeGuardians.prototype.clearAddressesList = function() {
  return this.setAddressesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Action.PythSetSymbolFeed.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Action.PythSetSymbolFeed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Action.PythSetSymbolFeed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.PythSetSymbolFeed.toObject = function(includeInstance, msg) {
  var f, obj = {
    oracleSymbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    priceFeedId: msg.getPriceFeedId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Action.PythSetSymbolFeed}
 */
proto.nord.Action.PythSetSymbolFeed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Action.PythSetSymbolFeed;
  return proto.nord.Action.PythSetSymbolFeed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Action.PythSetSymbolFeed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Action.PythSetSymbolFeed}
 */
proto.nord.Action.PythSetSymbolFeed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleSymbol(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPriceFeedId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Action.PythSetSymbolFeed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Action.PythSetSymbolFeed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Action.PythSetSymbolFeed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.PythSetSymbolFeed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOracleSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPriceFeedId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string oracle_symbol = 1;
 * @return {string}
 */
proto.nord.Action.PythSetSymbolFeed.prototype.getOracleSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nord.Action.PythSetSymbolFeed} returns this
 */
proto.nord.Action.PythSetSymbolFeed.prototype.setOracleSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes price_feed_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.nord.Action.PythSetSymbolFeed.prototype.getPriceFeedId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes price_feed_id = 2;
 * This is a type-conversion wrapper around `getPriceFeedId()`
 * @return {string}
 */
proto.nord.Action.PythSetSymbolFeed.prototype.getPriceFeedId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPriceFeedId()));
};


/**
 * optional bytes price_feed_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPriceFeedId()`
 * @return {!Uint8Array}
 */
proto.nord.Action.PythSetSymbolFeed.prototype.getPriceFeedId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPriceFeedId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nord.Action.PythSetSymbolFeed} returns this
 */
proto.nord.Action.PythSetSymbolFeed.prototype.setPriceFeedId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Action.PythPriceFeedUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Action.PythPriceFeedUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Action.PythPriceFeedUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.PythPriceFeedUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawPythnetData: msg.getRawPythnetData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Action.PythPriceFeedUpdate}
 */
proto.nord.Action.PythPriceFeedUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Action.PythPriceFeedUpdate;
  return proto.nord.Action.PythPriceFeedUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Action.PythPriceFeedUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Action.PythPriceFeedUpdate}
 */
proto.nord.Action.PythPriceFeedUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawPythnetData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Action.PythPriceFeedUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Action.PythPriceFeedUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Action.PythPriceFeedUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Action.PythPriceFeedUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawPythnetData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes raw_pythnet_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.nord.Action.PythPriceFeedUpdate.prototype.getRawPythnetData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes raw_pythnet_data = 1;
 * This is a type-conversion wrapper around `getRawPythnetData()`
 * @return {string}
 */
proto.nord.Action.PythPriceFeedUpdate.prototype.getRawPythnetData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawPythnetData()));
};


/**
 * optional bytes raw_pythnet_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawPythnetData()`
 * @return {!Uint8Array}
 */
proto.nord.Action.PythPriceFeedUpdate.prototype.getRawPythnetData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawPythnetData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nord.Action.PythPriceFeedUpdate} returns this
 */
proto.nord.Action.PythPriceFeedUpdate.prototype.setRawPythnetData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 current_timestamp = 1;
 * @return {number}
 */
proto.nord.Action.prototype.getCurrentTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action} returns this
 */
proto.nord.Action.prototype.setCurrentTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 nonce = 2;
 * @return {number}
 */
proto.nord.Action.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Action} returns this
 */
proto.nord.Action.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional CreateSession create_session = 4;
 * @return {?proto.nord.Action.CreateSession}
 */
proto.nord.Action.prototype.getCreateSession = function() {
  return /** @type{?proto.nord.Action.CreateSession} */ (
    jspb.Message.getWrapperField(this, proto.nord.Action.CreateSession, 4));
};


/**
 * @param {?proto.nord.Action.CreateSession|undefined} value
 * @return {!proto.nord.Action} returns this
*/
proto.nord.Action.prototype.setCreateSession = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.nord.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Action} returns this
 */
proto.nord.Action.prototype.clearCreateSession = function() {
  return this.setCreateSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Action.prototype.hasCreateSession = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CreateToken create_token = 5;
 * @return {?proto.nord.Action.CreateToken}
 */
proto.nord.Action.prototype.getCreateToken = function() {
  return /** @type{?proto.nord.Action.CreateToken} */ (
    jspb.Message.getWrapperField(this, proto.nord.Action.CreateToken, 5));
};


/**
 * @param {?proto.nord.Action.CreateToken|undefined} value
 * @return {!proto.nord.Action} returns this
*/
proto.nord.Action.prototype.setCreateToken = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.nord.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Action} returns this
 */
proto.nord.Action.prototype.clearCreateToken = function() {
  return this.setCreateToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Action.prototype.hasCreateToken = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CreateMarket create_market = 6;
 * @return {?proto.nord.Action.CreateMarket}
 */
proto.nord.Action.prototype.getCreateMarket = function() {
  return /** @type{?proto.nord.Action.CreateMarket} */ (
    jspb.Message.getWrapperField(this, proto.nord.Action.CreateMarket, 6));
};


/**
 * @param {?proto.nord.Action.CreateMarket|undefined} value
 * @return {!proto.nord.Action} returns this
*/
proto.nord.Action.prototype.setCreateMarket = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.nord.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Action} returns this
 */
proto.nord.Action.prototype.clearCreateMarket = function() {
  return this.setCreateMarket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Action.prototype.hasCreateMarket = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PlaceOrder place_order = 7;
 * @return {?proto.nord.Action.PlaceOrder}
 */
proto.nord.Action.prototype.getPlaceOrder = function() {
  return /** @type{?proto.nord.Action.PlaceOrder} */ (
    jspb.Message.getWrapperField(this, proto.nord.Action.PlaceOrder, 7));
};


/**
 * @param {?proto.nord.Action.PlaceOrder|undefined} value
 * @return {!proto.nord.Action} returns this
*/
proto.nord.Action.prototype.setPlaceOrder = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.nord.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Action} returns this
 */
proto.nord.Action.prototype.clearPlaceOrder = function() {
  return this.setPlaceOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Action.prototype.hasPlaceOrder = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CancelOrderById cancel_order_by_id = 8;
 * @return {?proto.nord.Action.CancelOrderById}
 */
proto.nord.Action.prototype.getCancelOrderById = function() {
  return /** @type{?proto.nord.Action.CancelOrderById} */ (
    jspb.Message.getWrapperField(this, proto.nord.Action.CancelOrderById, 8));
};


/**
 * @param {?proto.nord.Action.CancelOrderById|undefined} value
 * @return {!proto.nord.Action} returns this
*/
proto.nord.Action.prototype.setCancelOrderById = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.nord.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Action} returns this
 */
proto.nord.Action.prototype.clearCancelOrderById = function() {
  return this.setCancelOrderById(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Action.prototype.hasCancelOrderById = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Deposit deposit = 9;
 * @return {?proto.nord.Action.Deposit}
 */
proto.nord.Action.prototype.getDeposit = function() {
  return /** @type{?proto.nord.Action.Deposit} */ (
    jspb.Message.getWrapperField(this, proto.nord.Action.Deposit, 9));
};


/**
 * @param {?proto.nord.Action.Deposit|undefined} value
 * @return {!proto.nord.Action} returns this
*/
proto.nord.Action.prototype.setDeposit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.nord.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Action} returns this
 */
proto.nord.Action.prototype.clearDeposit = function() {
  return this.setDeposit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Action.prototype.hasDeposit = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Withdraw withdraw = 10;
 * @return {?proto.nord.Action.Withdraw}
 */
proto.nord.Action.prototype.getWithdraw = function() {
  return /** @type{?proto.nord.Action.Withdraw} */ (
    jspb.Message.getWrapperField(this, proto.nord.Action.Withdraw, 10));
};


/**
 * @param {?proto.nord.Action.Withdraw|undefined} value
 * @return {!proto.nord.Action} returns this
*/
proto.nord.Action.prototype.setWithdraw = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.nord.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Action} returns this
 */
proto.nord.Action.prototype.clearWithdraw = function() {
  return this.setWithdraw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Action.prototype.hasWithdraw = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PythSetWormholeGuardians pyth_set_wormhole_guardians = 11;
 * @return {?proto.nord.Action.PythSetWormholeGuardians}
 */
proto.nord.Action.prototype.getPythSetWormholeGuardians = function() {
  return /** @type{?proto.nord.Action.PythSetWormholeGuardians} */ (
    jspb.Message.getWrapperField(this, proto.nord.Action.PythSetWormholeGuardians, 11));
};


/**
 * @param {?proto.nord.Action.PythSetWormholeGuardians|undefined} value
 * @return {!proto.nord.Action} returns this
*/
proto.nord.Action.prototype.setPythSetWormholeGuardians = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.nord.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Action} returns this
 */
proto.nord.Action.prototype.clearPythSetWormholeGuardians = function() {
  return this.setPythSetWormholeGuardians(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Action.prototype.hasPythSetWormholeGuardians = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PythSetSymbolFeed pyth_set_symbol_feed = 12;
 * @return {?proto.nord.Action.PythSetSymbolFeed}
 */
proto.nord.Action.prototype.getPythSetSymbolFeed = function() {
  return /** @type{?proto.nord.Action.PythSetSymbolFeed} */ (
    jspb.Message.getWrapperField(this, proto.nord.Action.PythSetSymbolFeed, 12));
};


/**
 * @param {?proto.nord.Action.PythSetSymbolFeed|undefined} value
 * @return {!proto.nord.Action} returns this
*/
proto.nord.Action.prototype.setPythSetSymbolFeed = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.nord.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Action} returns this
 */
proto.nord.Action.prototype.clearPythSetSymbolFeed = function() {
  return this.setPythSetSymbolFeed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Action.prototype.hasPythSetSymbolFeed = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional PythPriceFeedUpdate pyth_price_feed_update = 13;
 * @return {?proto.nord.Action.PythPriceFeedUpdate}
 */
proto.nord.Action.prototype.getPythPriceFeedUpdate = function() {
  return /** @type{?proto.nord.Action.PythPriceFeedUpdate} */ (
    jspb.Message.getWrapperField(this, proto.nord.Action.PythPriceFeedUpdate, 13));
};


/**
 * @param {?proto.nord.Action.PythPriceFeedUpdate|undefined} value
 * @return {!proto.nord.Action} returns this
*/
proto.nord.Action.prototype.setPythPriceFeedUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.nord.Action.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Action} returns this
 */
proto.nord.Action.prototype.clearPythPriceFeedUpdate = function() {
  return this.setPythPriceFeedUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Action.prototype.hasPythPriceFeedUpdate = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nord.Receipt.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.nord.Receipt.KindCase = {
  KIND_NOT_SET: 0,
  ERR: 1,
  CREATE_SESSION_RESULT: 2,
  PLACE_ORDER_RESULT: 3,
  CANCEL_ORDER_RESULT: 4,
  DEPOSIT_RESULT: 5,
  INSERT_TOKEN_RESULT: 6,
  INSERT_MARKET_RESULT: 7,
  WITHDRAW_RESULT: 8,
  ORACLE_SYMBOL_FEED_RESULT: 9,
  ORACLE_UPDATE_RESULT: 10,
  UPDATE_GUARDIAN_SET_RESULT: 11
};

/**
 * @return {proto.nord.Receipt.KindCase}
 */
proto.nord.Receipt.prototype.getKindCase = function() {
  return /** @type {proto.nord.Receipt.KindCase} */(jspb.Message.computeOneofCase(this, proto.nord.Receipt.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    err: jspb.Message.getFieldWithDefault(msg, 1, 0),
    createSessionResult: (f = msg.getCreateSessionResult()) && proto.nord.Receipt.CreateSessionResult.toObject(includeInstance, f),
    placeOrderResult: (f = msg.getPlaceOrderResult()) && proto.nord.Receipt.PlaceOrderResult.toObject(includeInstance, f),
    cancelOrderResult: (f = msg.getCancelOrderResult()) && proto.nord.Receipt.CancelOrderResult.toObject(includeInstance, f),
    depositResult: (f = msg.getDepositResult()) && proto.nord.Receipt.DepositResult.toObject(includeInstance, f),
    insertTokenResult: (f = msg.getInsertTokenResult()) && proto.nord.Receipt.InsertTokenResult.toObject(includeInstance, f),
    insertMarketResult: (f = msg.getInsertMarketResult()) && proto.nord.Receipt.InsertMarketResult.toObject(includeInstance, f),
    withdrawResult: (f = msg.getWithdrawResult()) && proto.nord.Receipt.WithdrawResult.toObject(includeInstance, f),
    oracleSymbolFeedResult: (f = msg.getOracleSymbolFeedResult()) && proto.nord.Receipt.OracleSymbolFeedResult.toObject(includeInstance, f),
    oracleUpdateResult: (f = msg.getOracleUpdateResult()) && proto.nord.Receipt.OracleUpdateResult.toObject(includeInstance, f),
    updateGuardianSetResult: (f = msg.getUpdateGuardianSetResult()) && proto.nord.Receipt.UpdateGuardianSetResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Receipt}
 */
proto.nord.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Receipt;
  return proto.nord.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Receipt}
 */
proto.nord.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nord.Error} */ (reader.readEnum());
      msg.setErr(value);
      break;
    case 2:
      var value = new proto.nord.Receipt.CreateSessionResult;
      reader.readMessage(value,proto.nord.Receipt.CreateSessionResult.deserializeBinaryFromReader);
      msg.setCreateSessionResult(value);
      break;
    case 3:
      var value = new proto.nord.Receipt.PlaceOrderResult;
      reader.readMessage(value,proto.nord.Receipt.PlaceOrderResult.deserializeBinaryFromReader);
      msg.setPlaceOrderResult(value);
      break;
    case 4:
      var value = new proto.nord.Receipt.CancelOrderResult;
      reader.readMessage(value,proto.nord.Receipt.CancelOrderResult.deserializeBinaryFromReader);
      msg.setCancelOrderResult(value);
      break;
    case 5:
      var value = new proto.nord.Receipt.DepositResult;
      reader.readMessage(value,proto.nord.Receipt.DepositResult.deserializeBinaryFromReader);
      msg.setDepositResult(value);
      break;
    case 6:
      var value = new proto.nord.Receipt.InsertTokenResult;
      reader.readMessage(value,proto.nord.Receipt.InsertTokenResult.deserializeBinaryFromReader);
      msg.setInsertTokenResult(value);
      break;
    case 7:
      var value = new proto.nord.Receipt.InsertMarketResult;
      reader.readMessage(value,proto.nord.Receipt.InsertMarketResult.deserializeBinaryFromReader);
      msg.setInsertMarketResult(value);
      break;
    case 8:
      var value = new proto.nord.Receipt.WithdrawResult;
      reader.readMessage(value,proto.nord.Receipt.WithdrawResult.deserializeBinaryFromReader);
      msg.setWithdrawResult(value);
      break;
    case 9:
      var value = new proto.nord.Receipt.OracleSymbolFeedResult;
      reader.readMessage(value,proto.nord.Receipt.OracleSymbolFeedResult.deserializeBinaryFromReader);
      msg.setOracleSymbolFeedResult(value);
      break;
    case 10:
      var value = new proto.nord.Receipt.OracleUpdateResult;
      reader.readMessage(value,proto.nord.Receipt.OracleUpdateResult.deserializeBinaryFromReader);
      msg.setOracleUpdateResult(value);
      break;
    case 11:
      var value = new proto.nord.Receipt.UpdateGuardianSetResult;
      reader.readMessage(value,proto.nord.Receipt.UpdateGuardianSetResult.deserializeBinaryFromReader);
      msg.setUpdateGuardianSetResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.nord.Error} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCreateSessionResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nord.Receipt.CreateSessionResult.serializeBinaryToWriter
    );
  }
  f = message.getPlaceOrderResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nord.Receipt.PlaceOrderResult.serializeBinaryToWriter
    );
  }
  f = message.getCancelOrderResult();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nord.Receipt.CancelOrderResult.serializeBinaryToWriter
    );
  }
  f = message.getDepositResult();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.nord.Receipt.DepositResult.serializeBinaryToWriter
    );
  }
  f = message.getInsertTokenResult();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.nord.Receipt.InsertTokenResult.serializeBinaryToWriter
    );
  }
  f = message.getInsertMarketResult();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.nord.Receipt.InsertMarketResult.serializeBinaryToWriter
    );
  }
  f = message.getWithdrawResult();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.nord.Receipt.WithdrawResult.serializeBinaryToWriter
    );
  }
  f = message.getOracleSymbolFeedResult();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.nord.Receipt.OracleSymbolFeedResult.serializeBinaryToWriter
    );
  }
  f = message.getOracleUpdateResult();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nord.Receipt.OracleUpdateResult.serializeBinaryToWriter
    );
  }
  f = message.getUpdateGuardianSetResult();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.nord.Receipt.UpdateGuardianSetResult.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Receipt.Posted.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Receipt.Posted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Receipt.Posted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.Posted.toObject = function(includeInstance, msg) {
  var f, obj = {
    side: jspb.Message.getFieldWithDefault(msg, 1, 0),
    marketId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    price: jspb.Message.getFieldWithDefault(msg, 3, 0),
    size: jspb.Message.getFieldWithDefault(msg, 4, 0),
    orderId: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Receipt.Posted}
 */
proto.nord.Receipt.Posted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Receipt.Posted;
  return proto.nord.Receipt.Posted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Receipt.Posted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Receipt.Posted}
 */
proto.nord.Receipt.Posted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nord.Side} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMarketId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Receipt.Posted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Receipt.Posted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Receipt.Posted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.Posted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSide();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMarketId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getOrderId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional Side side = 1;
 * @return {!proto.nord.Side}
 */
proto.nord.Receipt.Posted.prototype.getSide = function() {
  return /** @type {!proto.nord.Side} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nord.Side} value
 * @return {!proto.nord.Receipt.Posted} returns this
 */
proto.nord.Receipt.Posted.prototype.setSide = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 market_id = 2;
 * @return {number}
 */
proto.nord.Receipt.Posted.prototype.getMarketId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.Posted} returns this
 */
proto.nord.Receipt.Posted.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 price = 3;
 * @return {number}
 */
proto.nord.Receipt.Posted.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.Posted} returns this
 */
proto.nord.Receipt.Posted.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 size = 4;
 * @return {number}
 */
proto.nord.Receipt.Posted.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.Posted} returns this
 */
proto.nord.Receipt.Posted.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 order_id = 5;
 * @return {number}
 */
proto.nord.Receipt.Posted.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.Posted} returns this
 */
proto.nord.Receipt.Posted.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Receipt.Trade.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Receipt.Trade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Receipt.Trade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.Trade.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    price: jspb.Message.getFieldWithDefault(msg, 4, 0),
    size: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Receipt.Trade}
 */
proto.nord.Receipt.Trade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Receipt.Trade;
  return proto.nord.Receipt.Trade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Receipt.Trade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Receipt.Trade}
 */
proto.nord.Receipt.Trade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrderId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Receipt.Trade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Receipt.Trade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Receipt.Trade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.Trade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 order_id = 2;
 * @return {number}
 */
proto.nord.Receipt.Trade.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.Trade} returns this
 */
proto.nord.Receipt.Trade.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 price = 4;
 * @return {number}
 */
proto.nord.Receipt.Trade.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.Trade} returns this
 */
proto.nord.Receipt.Trade.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 size = 5;
 * @return {number}
 */
proto.nord.Receipt.Trade.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.Trade} returns this
 */
proto.nord.Receipt.Trade.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Receipt.CreateSessionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Receipt.CreateSessionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Receipt.CreateSessionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.CreateSessionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Receipt.CreateSessionResult}
 */
proto.nord.Receipt.CreateSessionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Receipt.CreateSessionResult;
  return proto.nord.Receipt.CreateSessionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Receipt.CreateSessionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Receipt.CreateSessionResult}
 */
proto.nord.Receipt.CreateSessionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Receipt.CreateSessionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Receipt.CreateSessionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Receipt.CreateSessionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.CreateSessionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 session_id = 1;
 * @return {number}
 */
proto.nord.Receipt.CreateSessionResult.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.CreateSessionResult} returns this
 */
proto.nord.Receipt.CreateSessionResult.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nord.Receipt.PlaceOrderResult.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Receipt.PlaceOrderResult.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Receipt.PlaceOrderResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Receipt.PlaceOrderResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.PlaceOrderResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    posted: (f = msg.getPosted()) && proto.nord.Receipt.Posted.toObject(includeInstance, f),
    fillsList: jspb.Message.toObjectList(msg.getFillsList(),
    proto.nord.Receipt.Trade.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Receipt.PlaceOrderResult}
 */
proto.nord.Receipt.PlaceOrderResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Receipt.PlaceOrderResult;
  return proto.nord.Receipt.PlaceOrderResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Receipt.PlaceOrderResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Receipt.PlaceOrderResult}
 */
proto.nord.Receipt.PlaceOrderResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nord.Receipt.Posted;
      reader.readMessage(value,proto.nord.Receipt.Posted.deserializeBinaryFromReader);
      msg.setPosted(value);
      break;
    case 2:
      var value = new proto.nord.Receipt.Trade;
      reader.readMessage(value,proto.nord.Receipt.Trade.deserializeBinaryFromReader);
      msg.addFills(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Receipt.PlaceOrderResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Receipt.PlaceOrderResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Receipt.PlaceOrderResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.PlaceOrderResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosted();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nord.Receipt.Posted.serializeBinaryToWriter
    );
  }
  f = message.getFillsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.nord.Receipt.Trade.serializeBinaryToWriter
    );
  }
};


/**
 * optional Posted posted = 1;
 * @return {?proto.nord.Receipt.Posted}
 */
proto.nord.Receipt.PlaceOrderResult.prototype.getPosted = function() {
  return /** @type{?proto.nord.Receipt.Posted} */ (
    jspb.Message.getWrapperField(this, proto.nord.Receipt.Posted, 1));
};


/**
 * @param {?proto.nord.Receipt.Posted|undefined} value
 * @return {!proto.nord.Receipt.PlaceOrderResult} returns this
*/
proto.nord.Receipt.PlaceOrderResult.prototype.setPosted = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Receipt.PlaceOrderResult} returns this
 */
proto.nord.Receipt.PlaceOrderResult.prototype.clearPosted = function() {
  return this.setPosted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Receipt.PlaceOrderResult.prototype.hasPosted = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Trade fills = 2;
 * @return {!Array<!proto.nord.Receipt.Trade>}
 */
proto.nord.Receipt.PlaceOrderResult.prototype.getFillsList = function() {
  return /** @type{!Array<!proto.nord.Receipt.Trade>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nord.Receipt.Trade, 2));
};


/**
 * @param {!Array<!proto.nord.Receipt.Trade>} value
 * @return {!proto.nord.Receipt.PlaceOrderResult} returns this
*/
proto.nord.Receipt.PlaceOrderResult.prototype.setFillsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.nord.Receipt.Trade=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nord.Receipt.Trade}
 */
proto.nord.Receipt.PlaceOrderResult.prototype.addFills = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.nord.Receipt.Trade, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nord.Receipt.PlaceOrderResult} returns this
 */
proto.nord.Receipt.PlaceOrderResult.prototype.clearFillsList = function() {
  return this.setFillsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Receipt.CancelOrderResult.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Receipt.CancelOrderResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Receipt.CancelOrderResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.CancelOrderResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Receipt.CancelOrderResult}
 */
proto.nord.Receipt.CancelOrderResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Receipt.CancelOrderResult;
  return proto.nord.Receipt.CancelOrderResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Receipt.CancelOrderResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Receipt.CancelOrderResult}
 */
proto.nord.Receipt.CancelOrderResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOrderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Receipt.CancelOrderResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Receipt.CancelOrderResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Receipt.CancelOrderResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.CancelOrderResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 order_id = 1;
 * @return {number}
 */
proto.nord.Receipt.CancelOrderResult.prototype.getOrderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.CancelOrderResult} returns this
 */
proto.nord.Receipt.CancelOrderResult.prototype.setOrderId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Receipt.DepositResult.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Receipt.DepositResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Receipt.DepositResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.DepositResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    newAmount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userCreated: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Receipt.DepositResult}
 */
proto.nord.Receipt.DepositResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Receipt.DepositResult;
  return proto.nord.Receipt.DepositResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Receipt.DepositResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Receipt.DepositResult}
 */
proto.nord.Receipt.DepositResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTokenId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNewAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserCreated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Receipt.DepositResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Receipt.DepositResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Receipt.DepositResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.DepositResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNewAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUserCreated();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional uint32 token_id = 1;
 * @return {number}
 */
proto.nord.Receipt.DepositResult.prototype.getTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.DepositResult} returns this
 */
proto.nord.Receipt.DepositResult.prototype.setTokenId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 new_amount = 2;
 * @return {number}
 */
proto.nord.Receipt.DepositResult.prototype.getNewAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.DepositResult} returns this
 */
proto.nord.Receipt.DepositResult.prototype.setNewAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 user_id = 3;
 * @return {number}
 */
proto.nord.Receipt.DepositResult.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.DepositResult} returns this
 */
proto.nord.Receipt.DepositResult.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool user_created = 4;
 * @return {boolean}
 */
proto.nord.Receipt.DepositResult.prototype.getUserCreated = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nord.Receipt.DepositResult} returns this
 */
proto.nord.Receipt.DepositResult.prototype.setUserCreated = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Receipt.InsertTokenResult.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Receipt.InsertTokenResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Receipt.InsertTokenResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.InsertTokenResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainAddr: msg.getChainAddr_asB64(),
    token: (f = msg.getToken()) && proto.nord.Token.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Receipt.InsertTokenResult}
 */
proto.nord.Receipt.InsertTokenResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Receipt.InsertTokenResult;
  return proto.nord.Receipt.InsertTokenResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Receipt.InsertTokenResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Receipt.InsertTokenResult}
 */
proto.nord.Receipt.InsertTokenResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainAddr(value);
      break;
    case 2:
      var value = new proto.nord.Token;
      reader.readMessage(value,proto.nord.Token.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Receipt.InsertTokenResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Receipt.InsertTokenResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Receipt.InsertTokenResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.InsertTokenResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nord.Token.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes chain_addr = 1;
 * @return {!(string|Uint8Array)}
 */
proto.nord.Receipt.InsertTokenResult.prototype.getChainAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes chain_addr = 1;
 * This is a type-conversion wrapper around `getChainAddr()`
 * @return {string}
 */
proto.nord.Receipt.InsertTokenResult.prototype.getChainAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainAddr()));
};


/**
 * optional bytes chain_addr = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainAddr()`
 * @return {!Uint8Array}
 */
proto.nord.Receipt.InsertTokenResult.prototype.getChainAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainAddr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nord.Receipt.InsertTokenResult} returns this
 */
proto.nord.Receipt.InsertTokenResult.prototype.setChainAddr = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Token token = 2;
 * @return {?proto.nord.Token}
 */
proto.nord.Receipt.InsertTokenResult.prototype.getToken = function() {
  return /** @type{?proto.nord.Token} */ (
    jspb.Message.getWrapperField(this, proto.nord.Token, 2));
};


/**
 * @param {?proto.nord.Token|undefined} value
 * @return {!proto.nord.Receipt.InsertTokenResult} returns this
*/
proto.nord.Receipt.InsertTokenResult.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Receipt.InsertTokenResult} returns this
 */
proto.nord.Receipt.InsertTokenResult.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Receipt.InsertTokenResult.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Receipt.InsertMarketResult.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Receipt.InsertMarketResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Receipt.InsertMarketResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.InsertMarketResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: (f = msg.getMarket()) && proto.nord.Market.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Receipt.InsertMarketResult}
 */
proto.nord.Receipt.InsertMarketResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Receipt.InsertMarketResult;
  return proto.nord.Receipt.InsertMarketResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Receipt.InsertMarketResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Receipt.InsertMarketResult}
 */
proto.nord.Receipt.InsertMarketResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nord.Market;
      reader.readMessage(value,proto.nord.Market.deserializeBinaryFromReader);
      msg.setMarket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Receipt.InsertMarketResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Receipt.InsertMarketResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Receipt.InsertMarketResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.InsertMarketResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nord.Market.serializeBinaryToWriter
    );
  }
};


/**
 * optional Market market = 1;
 * @return {?proto.nord.Market}
 */
proto.nord.Receipt.InsertMarketResult.prototype.getMarket = function() {
  return /** @type{?proto.nord.Market} */ (
    jspb.Message.getWrapperField(this, proto.nord.Market, 1));
};


/**
 * @param {?proto.nord.Market|undefined} value
 * @return {!proto.nord.Receipt.InsertMarketResult} returns this
*/
proto.nord.Receipt.InsertMarketResult.prototype.setMarket = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Receipt.InsertMarketResult} returns this
 */
proto.nord.Receipt.InsertMarketResult.prototype.clearMarket = function() {
  return this.setMarket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Receipt.InsertMarketResult.prototype.hasMarket = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Receipt.WithdrawResult.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Receipt.WithdrawResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Receipt.WithdrawResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.WithdrawResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    balance: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    userPubkey: msg.getUserPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Receipt.WithdrawResult}
 */
proto.nord.Receipt.WithdrawResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Receipt.WithdrawResult;
  return proto.nord.Receipt.WithdrawResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Receipt.WithdrawResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Receipt.WithdrawResult}
 */
proto.nord.Receipt.WithdrawResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTokenId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBalance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserId(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUserPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Receipt.WithdrawResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Receipt.WithdrawResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Receipt.WithdrawResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.WithdrawResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getUserPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional uint32 token_id = 1;
 * @return {number}
 */
proto.nord.Receipt.WithdrawResult.prototype.getTokenId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.WithdrawResult} returns this
 */
proto.nord.Receipt.WithdrawResult.prototype.setTokenId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.nord.Receipt.WithdrawResult.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.WithdrawResult} returns this
 */
proto.nord.Receipt.WithdrawResult.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 balance = 3;
 * @return {number}
 */
proto.nord.Receipt.WithdrawResult.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.WithdrawResult} returns this
 */
proto.nord.Receipt.WithdrawResult.prototype.setBalance = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 user_id = 4;
 * @return {number}
 */
proto.nord.Receipt.WithdrawResult.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.WithdrawResult} returns this
 */
proto.nord.Receipt.WithdrawResult.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes user_pubkey = 5;
 * @return {!(string|Uint8Array)}
 */
proto.nord.Receipt.WithdrawResult.prototype.getUserPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes user_pubkey = 5;
 * This is a type-conversion wrapper around `getUserPubkey()`
 * @return {string}
 */
proto.nord.Receipt.WithdrawResult.prototype.getUserPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUserPubkey()));
};


/**
 * optional bytes user_pubkey = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUserPubkey()`
 * @return {!Uint8Array}
 */
proto.nord.Receipt.WithdrawResult.prototype.getUserPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUserPubkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nord.Receipt.WithdrawResult} returns this
 */
proto.nord.Receipt.WithdrawResult.prototype.setUserPubkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Receipt.OracleSymbolFeedResult.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Receipt.OracleSymbolFeedResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Receipt.OracleSymbolFeedResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.OracleSymbolFeedResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    oracleSymbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    feedId: msg.getFeedId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Receipt.OracleSymbolFeedResult}
 */
proto.nord.Receipt.OracleSymbolFeedResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Receipt.OracleSymbolFeedResult;
  return proto.nord.Receipt.OracleSymbolFeedResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Receipt.OracleSymbolFeedResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Receipt.OracleSymbolFeedResult}
 */
proto.nord.Receipt.OracleSymbolFeedResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleSymbol(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeedId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Receipt.OracleSymbolFeedResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Receipt.OracleSymbolFeedResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Receipt.OracleSymbolFeedResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.OracleSymbolFeedResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOracleSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeedId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string oracle_symbol = 1;
 * @return {string}
 */
proto.nord.Receipt.OracleSymbolFeedResult.prototype.getOracleSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nord.Receipt.OracleSymbolFeedResult} returns this
 */
proto.nord.Receipt.OracleSymbolFeedResult.prototype.setOracleSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes feed_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.nord.Receipt.OracleSymbolFeedResult.prototype.getFeedId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes feed_id = 2;
 * This is a type-conversion wrapper around `getFeedId()`
 * @return {string}
 */
proto.nord.Receipt.OracleSymbolFeedResult.prototype.getFeedId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeedId()));
};


/**
 * optional bytes feed_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeedId()`
 * @return {!Uint8Array}
 */
proto.nord.Receipt.OracleSymbolFeedResult.prototype.getFeedId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeedId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nord.Receipt.OracleSymbolFeedResult} returns this
 */
proto.nord.Receipt.OracleSymbolFeedResult.prototype.setFeedId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Receipt.OracleUpdateResult.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Receipt.OracleUpdateResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Receipt.OracleUpdateResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.OracleUpdateResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Receipt.OracleUpdateResult}
 */
proto.nord.Receipt.OracleUpdateResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Receipt.OracleUpdateResult;
  return proto.nord.Receipt.OracleUpdateResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Receipt.OracleUpdateResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Receipt.OracleUpdateResult}
 */
proto.nord.Receipt.OracleUpdateResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Receipt.OracleUpdateResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Receipt.OracleUpdateResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Receipt.OracleUpdateResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.OracleUpdateResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.nord.Receipt.OracleUpdateResult.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.OracleUpdateResult} returns this
 */
proto.nord.Receipt.OracleUpdateResult.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nord.Receipt.UpdateGuardianSetResult.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nord.Receipt.UpdateGuardianSetResult.prototype.toObject = function(opt_includeInstance) {
  return proto.nord.Receipt.UpdateGuardianSetResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nord.Receipt.UpdateGuardianSetResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.UpdateGuardianSetResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    guardianSetIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    addressesList: msg.getAddressesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nord.Receipt.UpdateGuardianSetResult}
 */
proto.nord.Receipt.UpdateGuardianSetResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nord.Receipt.UpdateGuardianSetResult;
  return proto.nord.Receipt.UpdateGuardianSetResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nord.Receipt.UpdateGuardianSetResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nord.Receipt.UpdateGuardianSetResult}
 */
proto.nord.Receipt.UpdateGuardianSetResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGuardianSetIndex(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAddresses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nord.Receipt.UpdateGuardianSetResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nord.Receipt.UpdateGuardianSetResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nord.Receipt.UpdateGuardianSetResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nord.Receipt.UpdateGuardianSetResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuardianSetIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAddressesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 guardian_set_index = 1;
 * @return {number}
 */
proto.nord.Receipt.UpdateGuardianSetResult.prototype.getGuardianSetIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nord.Receipt.UpdateGuardianSetResult} returns this
 */
proto.nord.Receipt.UpdateGuardianSetResult.prototype.setGuardianSetIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated bytes addresses = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.nord.Receipt.UpdateGuardianSetResult.prototype.getAddressesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes addresses = 2;
 * This is a type-conversion wrapper around `getAddressesList()`
 * @return {!Array<string>}
 */
proto.nord.Receipt.UpdateGuardianSetResult.prototype.getAddressesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAddressesList()));
};


/**
 * repeated bytes addresses = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddressesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.nord.Receipt.UpdateGuardianSetResult.prototype.getAddressesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAddressesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.nord.Receipt.UpdateGuardianSetResult} returns this
 */
proto.nord.Receipt.UpdateGuardianSetResult.prototype.setAddressesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.nord.Receipt.UpdateGuardianSetResult} returns this
 */
proto.nord.Receipt.UpdateGuardianSetResult.prototype.addAddresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nord.Receipt.UpdateGuardianSetResult} returns this
 */
proto.nord.Receipt.UpdateGuardianSetResult.prototype.clearAddressesList = function() {
  return this.setAddressesList([]);
};


/**
 * optional Error err = 1;
 * @return {!proto.nord.Error}
 */
proto.nord.Receipt.prototype.getErr = function() {
  return /** @type {!proto.nord.Error} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nord.Error} value
 * @return {!proto.nord.Receipt} returns this
 */
proto.nord.Receipt.prototype.setErr = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.nord.Receipt.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nord.Receipt} returns this
 */
proto.nord.Receipt.prototype.clearErr = function() {
  return jspb.Message.setOneofField(this, 1, proto.nord.Receipt.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Receipt.prototype.hasErr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CreateSessionResult create_session_result = 2;
 * @return {?proto.nord.Receipt.CreateSessionResult}
 */
proto.nord.Receipt.prototype.getCreateSessionResult = function() {
  return /** @type{?proto.nord.Receipt.CreateSessionResult} */ (
    jspb.Message.getWrapperField(this, proto.nord.Receipt.CreateSessionResult, 2));
};


/**
 * @param {?proto.nord.Receipt.CreateSessionResult|undefined} value
 * @return {!proto.nord.Receipt} returns this
*/
proto.nord.Receipt.prototype.setCreateSessionResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nord.Receipt.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Receipt} returns this
 */
proto.nord.Receipt.prototype.clearCreateSessionResult = function() {
  return this.setCreateSessionResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Receipt.prototype.hasCreateSessionResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PlaceOrderResult place_order_result = 3;
 * @return {?proto.nord.Receipt.PlaceOrderResult}
 */
proto.nord.Receipt.prototype.getPlaceOrderResult = function() {
  return /** @type{?proto.nord.Receipt.PlaceOrderResult} */ (
    jspb.Message.getWrapperField(this, proto.nord.Receipt.PlaceOrderResult, 3));
};


/**
 * @param {?proto.nord.Receipt.PlaceOrderResult|undefined} value
 * @return {!proto.nord.Receipt} returns this
*/
proto.nord.Receipt.prototype.setPlaceOrderResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.nord.Receipt.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Receipt} returns this
 */
proto.nord.Receipt.prototype.clearPlaceOrderResult = function() {
  return this.setPlaceOrderResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Receipt.prototype.hasPlaceOrderResult = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CancelOrderResult cancel_order_result = 4;
 * @return {?proto.nord.Receipt.CancelOrderResult}
 */
proto.nord.Receipt.prototype.getCancelOrderResult = function() {
  return /** @type{?proto.nord.Receipt.CancelOrderResult} */ (
    jspb.Message.getWrapperField(this, proto.nord.Receipt.CancelOrderResult, 4));
};


/**
 * @param {?proto.nord.Receipt.CancelOrderResult|undefined} value
 * @return {!proto.nord.Receipt} returns this
*/
proto.nord.Receipt.prototype.setCancelOrderResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.nord.Receipt.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Receipt} returns this
 */
proto.nord.Receipt.prototype.clearCancelOrderResult = function() {
  return this.setCancelOrderResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Receipt.prototype.hasCancelOrderResult = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DepositResult deposit_result = 5;
 * @return {?proto.nord.Receipt.DepositResult}
 */
proto.nord.Receipt.prototype.getDepositResult = function() {
  return /** @type{?proto.nord.Receipt.DepositResult} */ (
    jspb.Message.getWrapperField(this, proto.nord.Receipt.DepositResult, 5));
};


/**
 * @param {?proto.nord.Receipt.DepositResult|undefined} value
 * @return {!proto.nord.Receipt} returns this
*/
proto.nord.Receipt.prototype.setDepositResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.nord.Receipt.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Receipt} returns this
 */
proto.nord.Receipt.prototype.clearDepositResult = function() {
  return this.setDepositResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Receipt.prototype.hasDepositResult = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional InsertTokenResult insert_token_result = 6;
 * @return {?proto.nord.Receipt.InsertTokenResult}
 */
proto.nord.Receipt.prototype.getInsertTokenResult = function() {
  return /** @type{?proto.nord.Receipt.InsertTokenResult} */ (
    jspb.Message.getWrapperField(this, proto.nord.Receipt.InsertTokenResult, 6));
};


/**
 * @param {?proto.nord.Receipt.InsertTokenResult|undefined} value
 * @return {!proto.nord.Receipt} returns this
*/
proto.nord.Receipt.prototype.setInsertTokenResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.nord.Receipt.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Receipt} returns this
 */
proto.nord.Receipt.prototype.clearInsertTokenResult = function() {
  return this.setInsertTokenResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Receipt.prototype.hasInsertTokenResult = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional InsertMarketResult insert_market_result = 7;
 * @return {?proto.nord.Receipt.InsertMarketResult}
 */
proto.nord.Receipt.prototype.getInsertMarketResult = function() {
  return /** @type{?proto.nord.Receipt.InsertMarketResult} */ (
    jspb.Message.getWrapperField(this, proto.nord.Receipt.InsertMarketResult, 7));
};


/**
 * @param {?proto.nord.Receipt.InsertMarketResult|undefined} value
 * @return {!proto.nord.Receipt} returns this
*/
proto.nord.Receipt.prototype.setInsertMarketResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.nord.Receipt.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Receipt} returns this
 */
proto.nord.Receipt.prototype.clearInsertMarketResult = function() {
  return this.setInsertMarketResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Receipt.prototype.hasInsertMarketResult = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional WithdrawResult withdraw_result = 8;
 * @return {?proto.nord.Receipt.WithdrawResult}
 */
proto.nord.Receipt.prototype.getWithdrawResult = function() {
  return /** @type{?proto.nord.Receipt.WithdrawResult} */ (
    jspb.Message.getWrapperField(this, proto.nord.Receipt.WithdrawResult, 8));
};


/**
 * @param {?proto.nord.Receipt.WithdrawResult|undefined} value
 * @return {!proto.nord.Receipt} returns this
*/
proto.nord.Receipt.prototype.setWithdrawResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.nord.Receipt.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Receipt} returns this
 */
proto.nord.Receipt.prototype.clearWithdrawResult = function() {
  return this.setWithdrawResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Receipt.prototype.hasWithdrawResult = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional OracleSymbolFeedResult oracle_symbol_feed_result = 9;
 * @return {?proto.nord.Receipt.OracleSymbolFeedResult}
 */
proto.nord.Receipt.prototype.getOracleSymbolFeedResult = function() {
  return /** @type{?proto.nord.Receipt.OracleSymbolFeedResult} */ (
    jspb.Message.getWrapperField(this, proto.nord.Receipt.OracleSymbolFeedResult, 9));
};


/**
 * @param {?proto.nord.Receipt.OracleSymbolFeedResult|undefined} value
 * @return {!proto.nord.Receipt} returns this
*/
proto.nord.Receipt.prototype.setOracleSymbolFeedResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.nord.Receipt.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Receipt} returns this
 */
proto.nord.Receipt.prototype.clearOracleSymbolFeedResult = function() {
  return this.setOracleSymbolFeedResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Receipt.prototype.hasOracleSymbolFeedResult = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional OracleUpdateResult oracle_update_result = 10;
 * @return {?proto.nord.Receipt.OracleUpdateResult}
 */
proto.nord.Receipt.prototype.getOracleUpdateResult = function() {
  return /** @type{?proto.nord.Receipt.OracleUpdateResult} */ (
    jspb.Message.getWrapperField(this, proto.nord.Receipt.OracleUpdateResult, 10));
};


/**
 * @param {?proto.nord.Receipt.OracleUpdateResult|undefined} value
 * @return {!proto.nord.Receipt} returns this
*/
proto.nord.Receipt.prototype.setOracleUpdateResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.nord.Receipt.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Receipt} returns this
 */
proto.nord.Receipt.prototype.clearOracleUpdateResult = function() {
  return this.setOracleUpdateResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Receipt.prototype.hasOracleUpdateResult = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional UpdateGuardianSetResult update_guardian_set_result = 11;
 * @return {?proto.nord.Receipt.UpdateGuardianSetResult}
 */
proto.nord.Receipt.prototype.getUpdateGuardianSetResult = function() {
  return /** @type{?proto.nord.Receipt.UpdateGuardianSetResult} */ (
    jspb.Message.getWrapperField(this, proto.nord.Receipt.UpdateGuardianSetResult, 11));
};


/**
 * @param {?proto.nord.Receipt.UpdateGuardianSetResult|undefined} value
 * @return {!proto.nord.Receipt} returns this
*/
proto.nord.Receipt.prototype.setUpdateGuardianSetResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.nord.Receipt.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nord.Receipt} returns this
 */
proto.nord.Receipt.prototype.clearUpdateGuardianSetResult = function() {
  return this.setUpdateGuardianSetResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nord.Receipt.prototype.hasUpdateGuardianSetResult = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * @enum {number}
 */
proto.nord.Side = {
  ASK: 0,
  BID: 1
};

/**
 * @enum {number}
 */
proto.nord.FillMode = {
  LIMIT: 0,
  POST_ONLY: 1,
  IMMEDIATE_OR_CANCEL: 2,
  FILL_OR_KILL: 3
};

/**
 * @enum {number}
 */
proto.nord.MarketType = {
  SPOT: 0,
  PERPETUALS: 1
};

/**
 * @enum {number}
 */
proto.nord.Error = {
  DUPLICATE: 0,
  TIMESTAMP_STALE: 1,
  DECODE_FAILURE: 2,
  INVALID_SIGNATURE: 3,
  MARKET_NOT_FOUND: 4,
  TOKEN_NOT_FOUND: 5,
  USER_NOT_FOUND: 6,
  SESSION_NOT_FOUND: 7,
  ORDER_NOT_FOUND: 8,
  ORDER_SIZE_ZERO: 9,
  INSUFFICIENT_BALANCE: 10,
  ARITHMETIC_OVERFLOW: 11,
  RISK_TOO_HIGH: 12,
  ORDER_EXECUTION: 13,
  INVALID_ORDER_OWNER: 14,
  KEY_ALREADY_REGISTERED: 15,
  EXPIRY_TIMESTAMP_IN_PAST: 16,
  UPDATE_TIMESTAMP_IN_PAST: 17,
  TOO_MANY_OPEN_ORDERS: 18,
  TOO_MANY_OPEN_SESSIONS: 19,
  INVALID_ACTION_NONCE: 20,
  WITHDRAW_AMOUNT_TOO_SMALL: 21,
  PYTH_FEED_NOT_ADDED: 93,
  PYTH_FEED_MISSING: 94,
  PYTH_FEED_ALREADY_ADDED: 95,
  PYTH_GUARDIAN_SET_UNINITIALIZED: 96,
  PYTH_GUARDIAN_SET_INVALID: 97,
  UNINITIALIZED_PRICES: 98,
  PYTH_FEED_PRICE_OUT_OF_RANGE: 99,
  INVALID_PARAMETERS: 100,
  DROPPED: 999
};

goog.object.extend(exports, proto.nord);
