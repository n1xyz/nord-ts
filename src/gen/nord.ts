/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: nord.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace nord {
    export enum Side {
        ASK = 0,
        BID = 1
    }
    export enum FillMode {
        LIMIT = 0,
        POST_ONLY = 1,
        IMMEDIATE_OR_CANCEL = 2,
        FILL_OR_KILL = 3
    }
    export enum MarketType {
        SPOT = 0,
        PERPETUALS = 1
    }
    export enum Error {
        DUPLICATE = 0,
        TIMESTAMP_STALE = 1,
        DECODE_FAILURE = 2,
        INVALID_SIGNATURE = 3,
        MARKET_NOT_FOUND = 4,
        TOKEN_NOT_FOUND = 5,
        USER_NOT_FOUND = 6,
        SESSION_NOT_FOUND = 7,
        ORDER_NOT_FOUND = 8,
        ORDER_SIZE_ZERO = 9,
        INSUFFICIENT_BALANCE = 10,
        ARITHMETIC_OVERFLOW = 11,
        RISK_TOO_HIGH = 12,
        ORDER_EXECUTION = 13,
        INVALID_ORDER_OWNER = 14,
        KEY_ALREADY_REGISTERED = 15,
        EXPIRY_TIMESTAMP_IN_PAST = 16,
        UPDATE_TIMESTAMP_IN_PAST = 17,
        TOO_MANY_OPEN_ORDERS = 18,
        TOO_MANY_OPEN_SESSIONS = 19,
        INVALID_ACTION_NONCE = 20,
        WITHDRAW_AMOUNT_TOO_SMALL = 21,
        PYTH_FEED_NOT_ADDED = 93,
        PYTH_FEED_MISSING = 94,
        PYTH_FEED_ALREADY_ADDED = 95,
        PYTH_GUARDIAN_SET_UNINITIALIZED = 96,
        PYTH_GUARDIAN_SET_INVALID = 97,
        UNINITIALIZED_PRICES = 98,
        PYTH_FEED_PRICE_OUT_OF_RANGE = 99,
        INVALID_PARAMETERS = 100,
        Dropped = 999
    }
    export class Market extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            market_id?: number;
            price_decimals?: number;
            size_decimals?: number;
            base_token_id?: number;
            market_type?: MarketType;
            imf_bps?: number;
            cmf_bps?: number;
            mmf_bps?: number;
            symbol?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("market_id" in data && data.market_id != undefined) {
                    this.market_id = data.market_id;
                }
                if ("price_decimals" in data && data.price_decimals != undefined) {
                    this.price_decimals = data.price_decimals;
                }
                if ("size_decimals" in data && data.size_decimals != undefined) {
                    this.size_decimals = data.size_decimals;
                }
                if ("base_token_id" in data && data.base_token_id != undefined) {
                    this.base_token_id = data.base_token_id;
                }
                if ("market_type" in data && data.market_type != undefined) {
                    this.market_type = data.market_type;
                }
                if ("imf_bps" in data && data.imf_bps != undefined) {
                    this.imf_bps = data.imf_bps;
                }
                if ("cmf_bps" in data && data.cmf_bps != undefined) {
                    this.cmf_bps = data.cmf_bps;
                }
                if ("mmf_bps" in data && data.mmf_bps != undefined) {
                    this.mmf_bps = data.mmf_bps;
                }
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
            }
        }
        get market_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set market_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get price_decimals() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set price_decimals(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get size_decimals() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set size_decimals(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get base_token_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set base_token_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get market_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, MarketType.SPOT) as MarketType;
        }
        set market_type(value: MarketType) {
            pb_1.Message.setField(this, 5, value);
        }
        get imf_bps() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set imf_bps(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get cmf_bps() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set cmf_bps(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get mmf_bps() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set mmf_bps(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get symbol() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set symbol(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            market_id?: number;
            price_decimals?: number;
            size_decimals?: number;
            base_token_id?: number;
            market_type?: MarketType;
            imf_bps?: number;
            cmf_bps?: number;
            mmf_bps?: number;
            symbol?: string;
        }): Market {
            const message = new Market({});
            if (data.market_id != null) {
                message.market_id = data.market_id;
            }
            if (data.price_decimals != null) {
                message.price_decimals = data.price_decimals;
            }
            if (data.size_decimals != null) {
                message.size_decimals = data.size_decimals;
            }
            if (data.base_token_id != null) {
                message.base_token_id = data.base_token_id;
            }
            if (data.market_type != null) {
                message.market_type = data.market_type;
            }
            if (data.imf_bps != null) {
                message.imf_bps = data.imf_bps;
            }
            if (data.cmf_bps != null) {
                message.cmf_bps = data.cmf_bps;
            }
            if (data.mmf_bps != null) {
                message.mmf_bps = data.mmf_bps;
            }
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            return message;
        }
        toObject() {
            const data: {
                market_id?: number;
                price_decimals?: number;
                size_decimals?: number;
                base_token_id?: number;
                market_type?: MarketType;
                imf_bps?: number;
                cmf_bps?: number;
                mmf_bps?: number;
                symbol?: string;
            } = {};
            if (this.market_id != null) {
                data.market_id = this.market_id;
            }
            if (this.price_decimals != null) {
                data.price_decimals = this.price_decimals;
            }
            if (this.size_decimals != null) {
                data.size_decimals = this.size_decimals;
            }
            if (this.base_token_id != null) {
                data.base_token_id = this.base_token_id;
            }
            if (this.market_type != null) {
                data.market_type = this.market_type;
            }
            if (this.imf_bps != null) {
                data.imf_bps = this.imf_bps;
            }
            if (this.cmf_bps != null) {
                data.cmf_bps = this.cmf_bps;
            }
            if (this.mmf_bps != null) {
                data.mmf_bps = this.mmf_bps;
            }
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.market_id != 0)
                writer.writeUint32(1, this.market_id);
            if (this.price_decimals != 0)
                writer.writeUint32(2, this.price_decimals);
            if (this.size_decimals != 0)
                writer.writeUint32(3, this.size_decimals);
            if (this.base_token_id != 0)
                writer.writeUint32(4, this.base_token_id);
            if (this.market_type != MarketType.SPOT)
                writer.writeEnum(5, this.market_type);
            if (this.imf_bps != 0)
                writer.writeUint32(6, this.imf_bps);
            if (this.cmf_bps != 0)
                writer.writeUint32(7, this.cmf_bps);
            if (this.mmf_bps != 0)
                writer.writeUint32(8, this.mmf_bps);
            if (this.symbol.length)
                writer.writeString(10, this.symbol);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Market {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Market();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.market_id = reader.readUint32();
                        break;
                    case 2:
                        message.price_decimals = reader.readUint32();
                        break;
                    case 3:
                        message.size_decimals = reader.readUint32();
                        break;
                    case 4:
                        message.base_token_id = reader.readUint32();
                        break;
                    case 5:
                        message.market_type = reader.readEnum();
                        break;
                    case 6:
                        message.imf_bps = reader.readUint32();
                        break;
                    case 7:
                        message.cmf_bps = reader.readUint32();
                        break;
                    case 8:
                        message.mmf_bps = reader.readUint32();
                        break;
                    case 10:
                        message.symbol = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Market {
            return Market.deserialize(bytes);
        }
    }
    export class Token extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token_id?: number;
            decimals?: number;
            weight_bps?: number;
            symbol?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token_id" in data && data.token_id != undefined) {
                    this.token_id = data.token_id;
                }
                if ("decimals" in data && data.decimals != undefined) {
                    this.decimals = data.decimals;
                }
                if ("weight_bps" in data && data.weight_bps != undefined) {
                    this.weight_bps = data.weight_bps;
                }
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
            }
        }
        get token_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set token_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get decimals() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set decimals(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get weight_bps() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set weight_bps(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get symbol() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set symbol(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            token_id?: number;
            decimals?: number;
            weight_bps?: number;
            symbol?: string;
        }): Token {
            const message = new Token({});
            if (data.token_id != null) {
                message.token_id = data.token_id;
            }
            if (data.decimals != null) {
                message.decimals = data.decimals;
            }
            if (data.weight_bps != null) {
                message.weight_bps = data.weight_bps;
            }
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            return message;
        }
        toObject() {
            const data: {
                token_id?: number;
                decimals?: number;
                weight_bps?: number;
                symbol?: string;
            } = {};
            if (this.token_id != null) {
                data.token_id = this.token_id;
            }
            if (this.decimals != null) {
                data.decimals = this.decimals;
            }
            if (this.weight_bps != null) {
                data.weight_bps = this.weight_bps;
            }
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token_id != 0)
                writer.writeUint32(1, this.token_id);
            if (this.decimals != 0)
                writer.writeUint32(2, this.decimals);
            if (this.weight_bps != 0)
                writer.writeUint32(3, this.weight_bps);
            if (this.symbol.length)
                writer.writeString(4, this.symbol);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Token {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Token();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token_id = reader.readUint32();
                        break;
                    case 2:
                        message.decimals = reader.readUint32();
                        break;
                    case 3:
                        message.weight_bps = reader.readUint32();
                        break;
                    case 4:
                        message.symbol = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Token {
            return Token.deserialize(bytes);
        }
    }
    export class Action extends pb_1.Message {
        #one_of_decls: number[][] = [[4, 5, 6, 7, 8, 9, 10, 11, 12, 13]];
        constructor(data?: any[] | ({
            current_timestamp?: number;
            nonce?: number;
        } & (({
            create_session?: Action.CreateSession;
            create_token?: never;
            create_market?: never;
            place_order?: never;
            cancel_order_by_id?: never;
            deposit?: never;
            withdraw?: never;
            pyth_set_wormhole_guardians?: never;
            pyth_set_symbol_feed?: never;
            pyth_price_feed_update?: never;
        } | {
            create_session?: never;
            create_token?: Action.CreateToken;
            create_market?: never;
            place_order?: never;
            cancel_order_by_id?: never;
            deposit?: never;
            withdraw?: never;
            pyth_set_wormhole_guardians?: never;
            pyth_set_symbol_feed?: never;
            pyth_price_feed_update?: never;
        } | {
            create_session?: never;
            create_token?: never;
            create_market?: Action.CreateMarket;
            place_order?: never;
            cancel_order_by_id?: never;
            deposit?: never;
            withdraw?: never;
            pyth_set_wormhole_guardians?: never;
            pyth_set_symbol_feed?: never;
            pyth_price_feed_update?: never;
        } | {
            create_session?: never;
            create_token?: never;
            create_market?: never;
            place_order?: Action.PlaceOrder;
            cancel_order_by_id?: never;
            deposit?: never;
            withdraw?: never;
            pyth_set_wormhole_guardians?: never;
            pyth_set_symbol_feed?: never;
            pyth_price_feed_update?: never;
        } | {
            create_session?: never;
            create_token?: never;
            create_market?: never;
            place_order?: never;
            cancel_order_by_id?: Action.CancelOrderById;
            deposit?: never;
            withdraw?: never;
            pyth_set_wormhole_guardians?: never;
            pyth_set_symbol_feed?: never;
            pyth_price_feed_update?: never;
        } | {
            create_session?: never;
            create_token?: never;
            create_market?: never;
            place_order?: never;
            cancel_order_by_id?: never;
            deposit?: Action.Deposit;
            withdraw?: never;
            pyth_set_wormhole_guardians?: never;
            pyth_set_symbol_feed?: never;
            pyth_price_feed_update?: never;
        } | {
            create_session?: never;
            create_token?: never;
            create_market?: never;
            place_order?: never;
            cancel_order_by_id?: never;
            deposit?: never;
            withdraw?: Action.Withdraw;
            pyth_set_wormhole_guardians?: never;
            pyth_set_symbol_feed?: never;
            pyth_price_feed_update?: never;
        } | {
            create_session?: never;
            create_token?: never;
            create_market?: never;
            place_order?: never;
            cancel_order_by_id?: never;
            deposit?: never;
            withdraw?: never;
            pyth_set_wormhole_guardians?: Action.PythSetWormholeGuardians;
            pyth_set_symbol_feed?: never;
            pyth_price_feed_update?: never;
        } | {
            create_session?: never;
            create_token?: never;
            create_market?: never;
            place_order?: never;
            cancel_order_by_id?: never;
            deposit?: never;
            withdraw?: never;
            pyth_set_wormhole_guardians?: never;
            pyth_set_symbol_feed?: Action.PythSetSymbolFeed;
            pyth_price_feed_update?: never;
        } | {
            create_session?: never;
            create_token?: never;
            create_market?: never;
            place_order?: never;
            cancel_order_by_id?: never;
            deposit?: never;
            withdraw?: never;
            pyth_set_wormhole_guardians?: never;
            pyth_set_symbol_feed?: never;
            pyth_price_feed_update?: Action.PythPriceFeedUpdate;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("current_timestamp" in data && data.current_timestamp != undefined) {
                    this.current_timestamp = data.current_timestamp;
                }
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("create_session" in data && data.create_session != undefined) {
                    this.create_session = data.create_session;
                }
                if ("create_token" in data && data.create_token != undefined) {
                    this.create_token = data.create_token;
                }
                if ("create_market" in data && data.create_market != undefined) {
                    this.create_market = data.create_market;
                }
                if ("place_order" in data && data.place_order != undefined) {
                    this.place_order = data.place_order;
                }
                if ("cancel_order_by_id" in data && data.cancel_order_by_id != undefined) {
                    this.cancel_order_by_id = data.cancel_order_by_id;
                }
                if ("deposit" in data && data.deposit != undefined) {
                    this.deposit = data.deposit;
                }
                if ("withdraw" in data && data.withdraw != undefined) {
                    this.withdraw = data.withdraw;
                }
                if ("pyth_set_wormhole_guardians" in data && data.pyth_set_wormhole_guardians != undefined) {
                    this.pyth_set_wormhole_guardians = data.pyth_set_wormhole_guardians;
                }
                if ("pyth_set_symbol_feed" in data && data.pyth_set_symbol_feed != undefined) {
                    this.pyth_set_symbol_feed = data.pyth_set_symbol_feed;
                }
                if ("pyth_price_feed_update" in data && data.pyth_price_feed_update != undefined) {
                    this.pyth_price_feed_update = data.pyth_price_feed_update;
                }
            }
        }
        get current_timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set current_timestamp(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set nonce(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get create_session() {
            return pb_1.Message.getWrapperField(this, Action.CreateSession, 4) as Action.CreateSession;
        }
        set create_session(value: Action.CreateSession) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_create_session() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get create_token() {
            return pb_1.Message.getWrapperField(this, Action.CreateToken, 5) as Action.CreateToken;
        }
        set create_token(value: Action.CreateToken) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_create_token() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get create_market() {
            return pb_1.Message.getWrapperField(this, Action.CreateMarket, 6) as Action.CreateMarket;
        }
        set create_market(value: Action.CreateMarket) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_create_market() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get place_order() {
            return pb_1.Message.getWrapperField(this, Action.PlaceOrder, 7) as Action.PlaceOrder;
        }
        set place_order(value: Action.PlaceOrder) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_place_order() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get cancel_order_by_id() {
            return pb_1.Message.getWrapperField(this, Action.CancelOrderById, 8) as Action.CancelOrderById;
        }
        set cancel_order_by_id(value: Action.CancelOrderById) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_cancel_order_by_id() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get deposit() {
            return pb_1.Message.getWrapperField(this, Action.Deposit, 9) as Action.Deposit;
        }
        set deposit(value: Action.Deposit) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_deposit() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get withdraw() {
            return pb_1.Message.getWrapperField(this, Action.Withdraw, 10) as Action.Withdraw;
        }
        set withdraw(value: Action.Withdraw) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_withdraw() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get pyth_set_wormhole_guardians() {
            return pb_1.Message.getWrapperField(this, Action.PythSetWormholeGuardians, 11) as Action.PythSetWormholeGuardians;
        }
        set pyth_set_wormhole_guardians(value: Action.PythSetWormholeGuardians) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_pyth_set_wormhole_guardians() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get pyth_set_symbol_feed() {
            return pb_1.Message.getWrapperField(this, Action.PythSetSymbolFeed, 12) as Action.PythSetSymbolFeed;
        }
        set pyth_set_symbol_feed(value: Action.PythSetSymbolFeed) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_pyth_set_symbol_feed() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get pyth_price_feed_update() {
            return pb_1.Message.getWrapperField(this, Action.PythPriceFeedUpdate, 13) as Action.PythPriceFeedUpdate;
        }
        set pyth_price_feed_update(value: Action.PythPriceFeedUpdate) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_pyth_price_feed_update() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get kind() {
            const cases: {
                [index: number]: "none" | "create_session" | "create_token" | "create_market" | "place_order" | "cancel_order_by_id" | "deposit" | "withdraw" | "pyth_set_wormhole_guardians" | "pyth_set_symbol_feed" | "pyth_price_feed_update";
            } = {
                0: "none",
                4: "create_session",
                5: "create_token",
                6: "create_market",
                7: "place_order",
                8: "cancel_order_by_id",
                9: "deposit",
                10: "withdraw",
                11: "pyth_set_wormhole_guardians",
                12: "pyth_set_symbol_feed",
                13: "pyth_price_feed_update"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4, 5, 6, 7, 8, 9, 10, 11, 12, 13])];
        }
        static fromObject(data: {
            current_timestamp?: number;
            nonce?: number;
            create_session?: ReturnType<typeof Action.CreateSession.prototype.toObject>;
            create_token?: ReturnType<typeof Action.CreateToken.prototype.toObject>;
            create_market?: ReturnType<typeof Action.CreateMarket.prototype.toObject>;
            place_order?: ReturnType<typeof Action.PlaceOrder.prototype.toObject>;
            cancel_order_by_id?: ReturnType<typeof Action.CancelOrderById.prototype.toObject>;
            deposit?: ReturnType<typeof Action.Deposit.prototype.toObject>;
            withdraw?: ReturnType<typeof Action.Withdraw.prototype.toObject>;
            pyth_set_wormhole_guardians?: ReturnType<typeof Action.PythSetWormholeGuardians.prototype.toObject>;
            pyth_set_symbol_feed?: ReturnType<typeof Action.PythSetSymbolFeed.prototype.toObject>;
            pyth_price_feed_update?: ReturnType<typeof Action.PythPriceFeedUpdate.prototype.toObject>;
        }): Action {
            const message = new Action({});
            if (data.current_timestamp != null) {
                message.current_timestamp = data.current_timestamp;
            }
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.create_session != null) {
                message.create_session = Action.CreateSession.fromObject(data.create_session);
            }
            if (data.create_token != null) {
                message.create_token = Action.CreateToken.fromObject(data.create_token);
            }
            if (data.create_market != null) {
                message.create_market = Action.CreateMarket.fromObject(data.create_market);
            }
            if (data.place_order != null) {
                message.place_order = Action.PlaceOrder.fromObject(data.place_order);
            }
            if (data.cancel_order_by_id != null) {
                message.cancel_order_by_id = Action.CancelOrderById.fromObject(data.cancel_order_by_id);
            }
            if (data.deposit != null) {
                message.deposit = Action.Deposit.fromObject(data.deposit);
            }
            if (data.withdraw != null) {
                message.withdraw = Action.Withdraw.fromObject(data.withdraw);
            }
            if (data.pyth_set_wormhole_guardians != null) {
                message.pyth_set_wormhole_guardians = Action.PythSetWormholeGuardians.fromObject(data.pyth_set_wormhole_guardians);
            }
            if (data.pyth_set_symbol_feed != null) {
                message.pyth_set_symbol_feed = Action.PythSetSymbolFeed.fromObject(data.pyth_set_symbol_feed);
            }
            if (data.pyth_price_feed_update != null) {
                message.pyth_price_feed_update = Action.PythPriceFeedUpdate.fromObject(data.pyth_price_feed_update);
            }
            return message;
        }
        toObject() {
            const data: {
                current_timestamp?: number;
                nonce?: number;
                create_session?: ReturnType<typeof Action.CreateSession.prototype.toObject>;
                create_token?: ReturnType<typeof Action.CreateToken.prototype.toObject>;
                create_market?: ReturnType<typeof Action.CreateMarket.prototype.toObject>;
                place_order?: ReturnType<typeof Action.PlaceOrder.prototype.toObject>;
                cancel_order_by_id?: ReturnType<typeof Action.CancelOrderById.prototype.toObject>;
                deposit?: ReturnType<typeof Action.Deposit.prototype.toObject>;
                withdraw?: ReturnType<typeof Action.Withdraw.prototype.toObject>;
                pyth_set_wormhole_guardians?: ReturnType<typeof Action.PythSetWormholeGuardians.prototype.toObject>;
                pyth_set_symbol_feed?: ReturnType<typeof Action.PythSetSymbolFeed.prototype.toObject>;
                pyth_price_feed_update?: ReturnType<typeof Action.PythPriceFeedUpdate.prototype.toObject>;
            } = {};
            if (this.current_timestamp != null) {
                data.current_timestamp = this.current_timestamp;
            }
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.create_session != null) {
                data.create_session = this.create_session.toObject();
            }
            if (this.create_token != null) {
                data.create_token = this.create_token.toObject();
            }
            if (this.create_market != null) {
                data.create_market = this.create_market.toObject();
            }
            if (this.place_order != null) {
                data.place_order = this.place_order.toObject();
            }
            if (this.cancel_order_by_id != null) {
                data.cancel_order_by_id = this.cancel_order_by_id.toObject();
            }
            if (this.deposit != null) {
                data.deposit = this.deposit.toObject();
            }
            if (this.withdraw != null) {
                data.withdraw = this.withdraw.toObject();
            }
            if (this.pyth_set_wormhole_guardians != null) {
                data.pyth_set_wormhole_guardians = this.pyth_set_wormhole_guardians.toObject();
            }
            if (this.pyth_set_symbol_feed != null) {
                data.pyth_set_symbol_feed = this.pyth_set_symbol_feed.toObject();
            }
            if (this.pyth_price_feed_update != null) {
                data.pyth_price_feed_update = this.pyth_price_feed_update.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.current_timestamp != 0)
                writer.writeInt64(1, this.current_timestamp);
            if (this.nonce != 0)
                writer.writeUint32(2, this.nonce);
            if (this.has_create_session)
                writer.writeMessage(4, this.create_session, () => this.create_session.serialize(writer));
            if (this.has_create_token)
                writer.writeMessage(5, this.create_token, () => this.create_token.serialize(writer));
            if (this.has_create_market)
                writer.writeMessage(6, this.create_market, () => this.create_market.serialize(writer));
            if (this.has_place_order)
                writer.writeMessage(7, this.place_order, () => this.place_order.serialize(writer));
            if (this.has_cancel_order_by_id)
                writer.writeMessage(8, this.cancel_order_by_id, () => this.cancel_order_by_id.serialize(writer));
            if (this.has_deposit)
                writer.writeMessage(9, this.deposit, () => this.deposit.serialize(writer));
            if (this.has_withdraw)
                writer.writeMessage(10, this.withdraw, () => this.withdraw.serialize(writer));
            if (this.has_pyth_set_wormhole_guardians)
                writer.writeMessage(11, this.pyth_set_wormhole_guardians, () => this.pyth_set_wormhole_guardians.serialize(writer));
            if (this.has_pyth_set_symbol_feed)
                writer.writeMessage(12, this.pyth_set_symbol_feed, () => this.pyth_set_symbol_feed.serialize(writer));
            if (this.has_pyth_price_feed_update)
                writer.writeMessage(13, this.pyth_price_feed_update, () => this.pyth_price_feed_update.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Action {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Action();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.current_timestamp = reader.readInt64();
                        break;
                    case 2:
                        message.nonce = reader.readUint32();
                        break;
                    case 4:
                        reader.readMessage(message.create_session, () => message.create_session = Action.CreateSession.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.create_token, () => message.create_token = Action.CreateToken.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.create_market, () => message.create_market = Action.CreateMarket.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.place_order, () => message.place_order = Action.PlaceOrder.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.cancel_order_by_id, () => message.cancel_order_by_id = Action.CancelOrderById.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.deposit, () => message.deposit = Action.Deposit.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.withdraw, () => message.withdraw = Action.Withdraw.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.pyth_set_wormhole_guardians, () => message.pyth_set_wormhole_guardians = Action.PythSetWormholeGuardians.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.pyth_set_symbol_feed, () => message.pyth_set_symbol_feed = Action.PythSetSymbolFeed.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.pyth_price_feed_update, () => message.pyth_price_feed_update = Action.PythPriceFeedUpdate.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Action {
            return Action.deserialize(bytes);
        }
    }
    export namespace Action {
        export class CreateSession extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                user_id?: number;
                blst_pubkey?: Uint8Array;
                expiry_timestamp?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("user_id" in data && data.user_id != undefined) {
                        this.user_id = data.user_id;
                    }
                    if ("blst_pubkey" in data && data.blst_pubkey != undefined) {
                        this.blst_pubkey = data.blst_pubkey;
                    }
                    if ("expiry_timestamp" in data && data.expiry_timestamp != undefined) {
                        this.expiry_timestamp = data.expiry_timestamp;
                    }
                }
            }
            get user_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set user_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get blst_pubkey() {
                return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
            }
            set blst_pubkey(value: Uint8Array) {
                pb_1.Message.setField(this, 2, value);
            }
            get expiry_timestamp() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set expiry_timestamp(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                user_id?: number;
                blst_pubkey?: Uint8Array;
                expiry_timestamp?: number;
            }): CreateSession {
                const message = new CreateSession({});
                if (data.user_id != null) {
                    message.user_id = data.user_id;
                }
                if (data.blst_pubkey != null) {
                    message.blst_pubkey = data.blst_pubkey;
                }
                if (data.expiry_timestamp != null) {
                    message.expiry_timestamp = data.expiry_timestamp;
                }
                return message;
            }
            toObject() {
                const data: {
                    user_id?: number;
                    blst_pubkey?: Uint8Array;
                    expiry_timestamp?: number;
                } = {};
                if (this.user_id != null) {
                    data.user_id = this.user_id;
                }
                if (this.blst_pubkey != null) {
                    data.blst_pubkey = this.blst_pubkey;
                }
                if (this.expiry_timestamp != null) {
                    data.expiry_timestamp = this.expiry_timestamp;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.user_id != 0)
                    writer.writeUint32(1, this.user_id);
                if (this.blst_pubkey.length)
                    writer.writeBytes(2, this.blst_pubkey);
                if (this.expiry_timestamp != 0)
                    writer.writeInt64(3, this.expiry_timestamp);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSession {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSession();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.user_id = reader.readUint32();
                            break;
                        case 2:
                            message.blst_pubkey = reader.readBytes();
                            break;
                        case 3:
                            message.expiry_timestamp = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CreateSession {
                return CreateSession.deserialize(bytes);
            }
        }
        export class CreateToken extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                decimals?: number;
                weight_bps?: number;
                symbol?: string;
                oracle_symbol?: string;
                eth_addr?: Uint8Array;
                min_withdraw_amount?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("decimals" in data && data.decimals != undefined) {
                        this.decimals = data.decimals;
                    }
                    if ("weight_bps" in data && data.weight_bps != undefined) {
                        this.weight_bps = data.weight_bps;
                    }
                    if ("symbol" in data && data.symbol != undefined) {
                        this.symbol = data.symbol;
                    }
                    if ("oracle_symbol" in data && data.oracle_symbol != undefined) {
                        this.oracle_symbol = data.oracle_symbol;
                    }
                    if ("eth_addr" in data && data.eth_addr != undefined) {
                        this.eth_addr = data.eth_addr;
                    }
                    if ("min_withdraw_amount" in data && data.min_withdraw_amount != undefined) {
                        this.min_withdraw_amount = data.min_withdraw_amount;
                    }
                }
            }
            get decimals() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set decimals(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get weight_bps() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set weight_bps(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get symbol() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set symbol(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get oracle_symbol() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set oracle_symbol(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get eth_addr() {
                return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
            }
            set eth_addr(value: Uint8Array) {
                pb_1.Message.setField(this, 6, value);
            }
            get min_withdraw_amount() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set min_withdraw_amount(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            static fromObject(data: {
                decimals?: number;
                weight_bps?: number;
                symbol?: string;
                oracle_symbol?: string;
                eth_addr?: Uint8Array;
                min_withdraw_amount?: number;
            }): CreateToken {
                const message = new CreateToken({});
                if (data.decimals != null) {
                    message.decimals = data.decimals;
                }
                if (data.weight_bps != null) {
                    message.weight_bps = data.weight_bps;
                }
                if (data.symbol != null) {
                    message.symbol = data.symbol;
                }
                if (data.oracle_symbol != null) {
                    message.oracle_symbol = data.oracle_symbol;
                }
                if (data.eth_addr != null) {
                    message.eth_addr = data.eth_addr;
                }
                if (data.min_withdraw_amount != null) {
                    message.min_withdraw_amount = data.min_withdraw_amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    decimals?: number;
                    weight_bps?: number;
                    symbol?: string;
                    oracle_symbol?: string;
                    eth_addr?: Uint8Array;
                    min_withdraw_amount?: number;
                } = {};
                if (this.decimals != null) {
                    data.decimals = this.decimals;
                }
                if (this.weight_bps != null) {
                    data.weight_bps = this.weight_bps;
                }
                if (this.symbol != null) {
                    data.symbol = this.symbol;
                }
                if (this.oracle_symbol != null) {
                    data.oracle_symbol = this.oracle_symbol;
                }
                if (this.eth_addr != null) {
                    data.eth_addr = this.eth_addr;
                }
                if (this.min_withdraw_amount != null) {
                    data.min_withdraw_amount = this.min_withdraw_amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.decimals != 0)
                    writer.writeUint32(1, this.decimals);
                if (this.weight_bps != 0)
                    writer.writeUint32(3, this.weight_bps);
                if (this.symbol.length)
                    writer.writeString(4, this.symbol);
                if (this.oracle_symbol.length)
                    writer.writeString(5, this.oracle_symbol);
                if (this.eth_addr.length)
                    writer.writeBytes(6, this.eth_addr);
                if (this.min_withdraw_amount != 0)
                    writer.writeUint64(7, this.min_withdraw_amount);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateToken {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateToken();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.decimals = reader.readUint32();
                            break;
                        case 3:
                            message.weight_bps = reader.readUint32();
                            break;
                        case 4:
                            message.symbol = reader.readString();
                            break;
                        case 5:
                            message.oracle_symbol = reader.readString();
                            break;
                        case 6:
                            message.eth_addr = reader.readBytes();
                            break;
                        case 7:
                            message.min_withdraw_amount = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CreateToken {
                return CreateToken.deserialize(bytes);
            }
        }
        export class CreateMarket extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                decimals?: number;
                tick_size?: number;
                imf_bps?: number;
                cmf_bps?: number;
                mmf_bps?: number;
                market_type?: MarketType;
                symbol?: string;
                oracle_symbol?: string;
                base_token_id?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("decimals" in data && data.decimals != undefined) {
                        this.decimals = data.decimals;
                    }
                    if ("tick_size" in data && data.tick_size != undefined) {
                        this.tick_size = data.tick_size;
                    }
                    if ("imf_bps" in data && data.imf_bps != undefined) {
                        this.imf_bps = data.imf_bps;
                    }
                    if ("cmf_bps" in data && data.cmf_bps != undefined) {
                        this.cmf_bps = data.cmf_bps;
                    }
                    if ("mmf_bps" in data && data.mmf_bps != undefined) {
                        this.mmf_bps = data.mmf_bps;
                    }
                    if ("market_type" in data && data.market_type != undefined) {
                        this.market_type = data.market_type;
                    }
                    if ("symbol" in data && data.symbol != undefined) {
                        this.symbol = data.symbol;
                    }
                    if ("oracle_symbol" in data && data.oracle_symbol != undefined) {
                        this.oracle_symbol = data.oracle_symbol;
                    }
                    if ("base_token_id" in data && data.base_token_id != undefined) {
                        this.base_token_id = data.base_token_id;
                    }
                }
            }
            get decimals() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set decimals(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get tick_size() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set tick_size(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get imf_bps() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set imf_bps(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get cmf_bps() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set cmf_bps(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get mmf_bps() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set mmf_bps(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get market_type() {
                return pb_1.Message.getFieldWithDefault(this, 6, MarketType.SPOT) as MarketType;
            }
            set market_type(value: MarketType) {
                pb_1.Message.setField(this, 6, value);
            }
            get symbol() {
                return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
            }
            set symbol(value: string) {
                pb_1.Message.setField(this, 7, value);
            }
            get oracle_symbol() {
                return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
            }
            set oracle_symbol(value: string) {
                pb_1.Message.setField(this, 8, value);
            }
            get base_token_id() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
            }
            set base_token_id(value: number) {
                pb_1.Message.setField(this, 9, value);
            }
            static fromObject(data: {
                decimals?: number;
                tick_size?: number;
                imf_bps?: number;
                cmf_bps?: number;
                mmf_bps?: number;
                market_type?: MarketType;
                symbol?: string;
                oracle_symbol?: string;
                base_token_id?: number;
            }): CreateMarket {
                const message = new CreateMarket({});
                if (data.decimals != null) {
                    message.decimals = data.decimals;
                }
                if (data.tick_size != null) {
                    message.tick_size = data.tick_size;
                }
                if (data.imf_bps != null) {
                    message.imf_bps = data.imf_bps;
                }
                if (data.cmf_bps != null) {
                    message.cmf_bps = data.cmf_bps;
                }
                if (data.mmf_bps != null) {
                    message.mmf_bps = data.mmf_bps;
                }
                if (data.market_type != null) {
                    message.market_type = data.market_type;
                }
                if (data.symbol != null) {
                    message.symbol = data.symbol;
                }
                if (data.oracle_symbol != null) {
                    message.oracle_symbol = data.oracle_symbol;
                }
                if (data.base_token_id != null) {
                    message.base_token_id = data.base_token_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    decimals?: number;
                    tick_size?: number;
                    imf_bps?: number;
                    cmf_bps?: number;
                    mmf_bps?: number;
                    market_type?: MarketType;
                    symbol?: string;
                    oracle_symbol?: string;
                    base_token_id?: number;
                } = {};
                if (this.decimals != null) {
                    data.decimals = this.decimals;
                }
                if (this.tick_size != null) {
                    data.tick_size = this.tick_size;
                }
                if (this.imf_bps != null) {
                    data.imf_bps = this.imf_bps;
                }
                if (this.cmf_bps != null) {
                    data.cmf_bps = this.cmf_bps;
                }
                if (this.mmf_bps != null) {
                    data.mmf_bps = this.mmf_bps;
                }
                if (this.market_type != null) {
                    data.market_type = this.market_type;
                }
                if (this.symbol != null) {
                    data.symbol = this.symbol;
                }
                if (this.oracle_symbol != null) {
                    data.oracle_symbol = this.oracle_symbol;
                }
                if (this.base_token_id != null) {
                    data.base_token_id = this.base_token_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.decimals != 0)
                    writer.writeUint32(1, this.decimals);
                if (this.tick_size != 0)
                    writer.writeUint32(2, this.tick_size);
                if (this.imf_bps != 0)
                    writer.writeUint32(3, this.imf_bps);
                if (this.cmf_bps != 0)
                    writer.writeUint32(4, this.cmf_bps);
                if (this.mmf_bps != 0)
                    writer.writeUint32(5, this.mmf_bps);
                if (this.market_type != MarketType.SPOT)
                    writer.writeEnum(6, this.market_type);
                if (this.symbol.length)
                    writer.writeString(7, this.symbol);
                if (this.oracle_symbol.length)
                    writer.writeString(8, this.oracle_symbol);
                if (this.base_token_id != 0)
                    writer.writeUint32(9, this.base_token_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateMarket {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateMarket();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.decimals = reader.readUint32();
                            break;
                        case 2:
                            message.tick_size = reader.readUint32();
                            break;
                        case 3:
                            message.imf_bps = reader.readUint32();
                            break;
                        case 4:
                            message.cmf_bps = reader.readUint32();
                            break;
                        case 5:
                            message.mmf_bps = reader.readUint32();
                            break;
                        case 6:
                            message.market_type = reader.readEnum();
                            break;
                        case 7:
                            message.symbol = reader.readString();
                            break;
                        case 8:
                            message.oracle_symbol = reader.readString();
                            break;
                        case 9:
                            message.base_token_id = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CreateMarket {
                return CreateMarket.deserialize(bytes);
            }
        }
        export class PlaceOrder extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                session_id?: number;
                market_id?: number;
                side?: Side;
                fill_mode?: FillMode;
                is_reduce_only?: boolean;
                price?: number;
                size?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("session_id" in data && data.session_id != undefined) {
                        this.session_id = data.session_id;
                    }
                    if ("market_id" in data && data.market_id != undefined) {
                        this.market_id = data.market_id;
                    }
                    if ("side" in data && data.side != undefined) {
                        this.side = data.side;
                    }
                    if ("fill_mode" in data && data.fill_mode != undefined) {
                        this.fill_mode = data.fill_mode;
                    }
                    if ("is_reduce_only" in data && data.is_reduce_only != undefined) {
                        this.is_reduce_only = data.is_reduce_only;
                    }
                    if ("price" in data && data.price != undefined) {
                        this.price = data.price;
                    }
                    if ("size" in data && data.size != undefined) {
                        this.size = data.size;
                    }
                }
            }
            get session_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set session_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get market_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set market_id(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get side() {
                return pb_1.Message.getFieldWithDefault(this, 3, Side.ASK) as Side;
            }
            set side(value: Side) {
                pb_1.Message.setField(this, 3, value);
            }
            get fill_mode() {
                return pb_1.Message.getFieldWithDefault(this, 4, FillMode.LIMIT) as FillMode;
            }
            set fill_mode(value: FillMode) {
                pb_1.Message.setField(this, 4, value);
            }
            get is_reduce_only() {
                return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
            }
            set is_reduce_only(value: boolean) {
                pb_1.Message.setField(this, 5, value);
            }
            get price() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set price(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get size() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set size(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            static fromObject(data: {
                session_id?: number;
                market_id?: number;
                side?: Side;
                fill_mode?: FillMode;
                is_reduce_only?: boolean;
                price?: number;
                size?: number;
            }): PlaceOrder {
                const message = new PlaceOrder({});
                if (data.session_id != null) {
                    message.session_id = data.session_id;
                }
                if (data.market_id != null) {
                    message.market_id = data.market_id;
                }
                if (data.side != null) {
                    message.side = data.side;
                }
                if (data.fill_mode != null) {
                    message.fill_mode = data.fill_mode;
                }
                if (data.is_reduce_only != null) {
                    message.is_reduce_only = data.is_reduce_only;
                }
                if (data.price != null) {
                    message.price = data.price;
                }
                if (data.size != null) {
                    message.size = data.size;
                }
                return message;
            }
            toObject() {
                const data: {
                    session_id?: number;
                    market_id?: number;
                    side?: Side;
                    fill_mode?: FillMode;
                    is_reduce_only?: boolean;
                    price?: number;
                    size?: number;
                } = {};
                if (this.session_id != null) {
                    data.session_id = this.session_id;
                }
                if (this.market_id != null) {
                    data.market_id = this.market_id;
                }
                if (this.side != null) {
                    data.side = this.side;
                }
                if (this.fill_mode != null) {
                    data.fill_mode = this.fill_mode;
                }
                if (this.is_reduce_only != null) {
                    data.is_reduce_only = this.is_reduce_only;
                }
                if (this.price != null) {
                    data.price = this.price;
                }
                if (this.size != null) {
                    data.size = this.size;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.session_id != 0)
                    writer.writeUint64(1, this.session_id);
                if (this.market_id != 0)
                    writer.writeUint32(2, this.market_id);
                if (this.side != Side.ASK)
                    writer.writeEnum(3, this.side);
                if (this.fill_mode != FillMode.LIMIT)
                    writer.writeEnum(4, this.fill_mode);
                if (this.is_reduce_only != false)
                    writer.writeBool(5, this.is_reduce_only);
                if (this.price != 0)
                    writer.writeUint64(6, this.price);
                if (this.size != 0)
                    writer.writeUint64(7, this.size);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlaceOrder {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlaceOrder();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.session_id = reader.readUint64();
                            break;
                        case 2:
                            message.market_id = reader.readUint32();
                            break;
                        case 3:
                            message.side = reader.readEnum();
                            break;
                        case 4:
                            message.fill_mode = reader.readEnum();
                            break;
                        case 5:
                            message.is_reduce_only = reader.readBool();
                            break;
                        case 6:
                            message.price = reader.readUint64();
                            break;
                        case 7:
                            message.size = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PlaceOrder {
                return PlaceOrder.deserialize(bytes);
            }
        }
        export class CancelOrderById extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                session_id?: number;
                order_id?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("session_id" in data && data.session_id != undefined) {
                        this.session_id = data.session_id;
                    }
                    if ("order_id" in data && data.order_id != undefined) {
                        this.order_id = data.order_id;
                    }
                }
            }
            get session_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set session_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get order_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set order_id(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                session_id?: number;
                order_id?: number;
            }): CancelOrderById {
                const message = new CancelOrderById({});
                if (data.session_id != null) {
                    message.session_id = data.session_id;
                }
                if (data.order_id != null) {
                    message.order_id = data.order_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    session_id?: number;
                    order_id?: number;
                } = {};
                if (this.session_id != null) {
                    data.session_id = this.session_id;
                }
                if (this.order_id != null) {
                    data.order_id = this.order_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.session_id != 0)
                    writer.writeUint64(1, this.session_id);
                if (this.order_id != 0)
                    writer.writeUint64(2, this.order_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelOrderById {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelOrderById();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.session_id = reader.readUint64();
                            break;
                        case 2:
                            message.order_id = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CancelOrderById {
                return CancelOrderById.deserialize(bytes);
            }
        }
        export class Deposit extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                action_nonce?: number;
                token_id?: number;
                amount?: number;
                user_secp256k1_pubkey?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("action_nonce" in data && data.action_nonce != undefined) {
                        this.action_nonce = data.action_nonce;
                    }
                    if ("token_id" in data && data.token_id != undefined) {
                        this.token_id = data.token_id;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                    if ("user_secp256k1_pubkey" in data && data.user_secp256k1_pubkey != undefined) {
                        this.user_secp256k1_pubkey = data.user_secp256k1_pubkey;
                    }
                }
            }
            get action_nonce() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set action_nonce(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get token_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set token_id(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get user_secp256k1_pubkey() {
                return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
            }
            set user_secp256k1_pubkey(value: Uint8Array) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                action_nonce?: number;
                token_id?: number;
                amount?: number;
                user_secp256k1_pubkey?: Uint8Array;
            }): Deposit {
                const message = new Deposit({});
                if (data.action_nonce != null) {
                    message.action_nonce = data.action_nonce;
                }
                if (data.token_id != null) {
                    message.token_id = data.token_id;
                }
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                if (data.user_secp256k1_pubkey != null) {
                    message.user_secp256k1_pubkey = data.user_secp256k1_pubkey;
                }
                return message;
            }
            toObject() {
                const data: {
                    action_nonce?: number;
                    token_id?: number;
                    amount?: number;
                    user_secp256k1_pubkey?: Uint8Array;
                } = {};
                if (this.action_nonce != null) {
                    data.action_nonce = this.action_nonce;
                }
                if (this.token_id != null) {
                    data.token_id = this.token_id;
                }
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                if (this.user_secp256k1_pubkey != null) {
                    data.user_secp256k1_pubkey = this.user_secp256k1_pubkey;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.action_nonce != 0)
                    writer.writeUint64(1, this.action_nonce);
                if (this.token_id != 0)
                    writer.writeUint32(2, this.token_id);
                if (this.amount != 0)
                    writer.writeUint64(3, this.amount);
                if (this.user_secp256k1_pubkey.length)
                    writer.writeBytes(4, this.user_secp256k1_pubkey);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Deposit {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Deposit();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.action_nonce = reader.readUint64();
                            break;
                        case 2:
                            message.token_id = reader.readUint32();
                            break;
                        case 3:
                            message.amount = reader.readUint64();
                            break;
                        case 4:
                            message.user_secp256k1_pubkey = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Deposit {
                return Deposit.deserialize(bytes);
            }
        }
        export class Withdraw extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                token_id?: number;
                user_id?: number;
                amount?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("token_id" in data && data.token_id != undefined) {
                        this.token_id = data.token_id;
                    }
                    if ("user_id" in data && data.user_id != undefined) {
                        this.user_id = data.user_id;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                }
            }
            get token_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set token_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get user_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set user_id(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                token_id?: number;
                user_id?: number;
                amount?: number;
            }): Withdraw {
                const message = new Withdraw({});
                if (data.token_id != null) {
                    message.token_id = data.token_id;
                }
                if (data.user_id != null) {
                    message.user_id = data.user_id;
                }
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    token_id?: number;
                    user_id?: number;
                    amount?: number;
                } = {};
                if (this.token_id != null) {
                    data.token_id = this.token_id;
                }
                if (this.user_id != null) {
                    data.user_id = this.user_id;
                }
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.token_id != 0)
                    writer.writeUint32(1, this.token_id);
                if (this.user_id != 0)
                    writer.writeUint32(2, this.user_id);
                if (this.amount != 0)
                    writer.writeUint64(3, this.amount);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Withdraw {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Withdraw();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.token_id = reader.readUint32();
                            break;
                        case 2:
                            message.user_id = reader.readUint32();
                            break;
                        case 3:
                            message.amount = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Withdraw {
                return Withdraw.deserialize(bytes);
            }
        }
        export class PythSetWormholeGuardians extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                guardian_set_index?: number;
                addresses?: Uint8Array[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("guardian_set_index" in data && data.guardian_set_index != undefined) {
                        this.guardian_set_index = data.guardian_set_index;
                    }
                    if ("addresses" in data && data.addresses != undefined) {
                        this.addresses = data.addresses;
                    }
                }
            }
            get guardian_set_index() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set guardian_set_index(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get addresses() {
                return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
            }
            set addresses(value: Uint8Array[]) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                guardian_set_index?: number;
                addresses?: Uint8Array[];
            }): PythSetWormholeGuardians {
                const message = new PythSetWormholeGuardians({});
                if (data.guardian_set_index != null) {
                    message.guardian_set_index = data.guardian_set_index;
                }
                if (data.addresses != null) {
                    message.addresses = data.addresses;
                }
                return message;
            }
            toObject() {
                const data: {
                    guardian_set_index?: number;
                    addresses?: Uint8Array[];
                } = {};
                if (this.guardian_set_index != null) {
                    data.guardian_set_index = this.guardian_set_index;
                }
                if (this.addresses != null) {
                    data.addresses = this.addresses;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.guardian_set_index != 0)
                    writer.writeUint32(1, this.guardian_set_index);
                if (this.addresses.length)
                    writer.writeRepeatedBytes(2, this.addresses);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PythSetWormholeGuardians {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PythSetWormholeGuardians();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.guardian_set_index = reader.readUint32();
                            break;
                        case 2:
                            pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PythSetWormholeGuardians {
                return PythSetWormholeGuardians.deserialize(bytes);
            }
        }
        export class PythSetSymbolFeed extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                oracle_symbol?: string;
                price_feed_id?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("oracle_symbol" in data && data.oracle_symbol != undefined) {
                        this.oracle_symbol = data.oracle_symbol;
                    }
                    if ("price_feed_id" in data && data.price_feed_id != undefined) {
                        this.price_feed_id = data.price_feed_id;
                    }
                }
            }
            get oracle_symbol() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set oracle_symbol(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get price_feed_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
            }
            set price_feed_id(value: Uint8Array) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                oracle_symbol?: string;
                price_feed_id?: Uint8Array;
            }): PythSetSymbolFeed {
                const message = new PythSetSymbolFeed({});
                if (data.oracle_symbol != null) {
                    message.oracle_symbol = data.oracle_symbol;
                }
                if (data.price_feed_id != null) {
                    message.price_feed_id = data.price_feed_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    oracle_symbol?: string;
                    price_feed_id?: Uint8Array;
                } = {};
                if (this.oracle_symbol != null) {
                    data.oracle_symbol = this.oracle_symbol;
                }
                if (this.price_feed_id != null) {
                    data.price_feed_id = this.price_feed_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.oracle_symbol.length)
                    writer.writeString(1, this.oracle_symbol);
                if (this.price_feed_id.length)
                    writer.writeBytes(2, this.price_feed_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PythSetSymbolFeed {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PythSetSymbolFeed();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.oracle_symbol = reader.readString();
                            break;
                        case 2:
                            message.price_feed_id = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PythSetSymbolFeed {
                return PythSetSymbolFeed.deserialize(bytes);
            }
        }
        export class PythPriceFeedUpdate extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                raw_pythnet_data?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("raw_pythnet_data" in data && data.raw_pythnet_data != undefined) {
                        this.raw_pythnet_data = data.raw_pythnet_data;
                    }
                }
            }
            get raw_pythnet_data() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set raw_pythnet_data(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                raw_pythnet_data?: Uint8Array;
            }): PythPriceFeedUpdate {
                const message = new PythPriceFeedUpdate({});
                if (data.raw_pythnet_data != null) {
                    message.raw_pythnet_data = data.raw_pythnet_data;
                }
                return message;
            }
            toObject() {
                const data: {
                    raw_pythnet_data?: Uint8Array;
                } = {};
                if (this.raw_pythnet_data != null) {
                    data.raw_pythnet_data = this.raw_pythnet_data;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.raw_pythnet_data.length)
                    writer.writeBytes(1, this.raw_pythnet_data);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PythPriceFeedUpdate {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PythPriceFeedUpdate();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.raw_pythnet_data = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PythPriceFeedUpdate {
                return PythPriceFeedUpdate.deserialize(bytes);
            }
        }
    }
    export class Receipt extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]];
        constructor(data?: any[] | ({} & (({
            err?: Error;
            create_session_result?: never;
            place_order_result?: never;
            cancel_order_result?: never;
            deposit_result?: never;
            insert_token_result?: never;
            insert_market_result?: never;
            withdraw_result?: never;
            oracle_symbol_feed_result?: never;
            oracle_update_result?: never;
            update_guardian_set_result?: never;
        } | {
            err?: never;
            create_session_result?: Receipt.CreateSessionResult;
            place_order_result?: never;
            cancel_order_result?: never;
            deposit_result?: never;
            insert_token_result?: never;
            insert_market_result?: never;
            withdraw_result?: never;
            oracle_symbol_feed_result?: never;
            oracle_update_result?: never;
            update_guardian_set_result?: never;
        } | {
            err?: never;
            create_session_result?: never;
            place_order_result?: Receipt.PlaceOrderResult;
            cancel_order_result?: never;
            deposit_result?: never;
            insert_token_result?: never;
            insert_market_result?: never;
            withdraw_result?: never;
            oracle_symbol_feed_result?: never;
            oracle_update_result?: never;
            update_guardian_set_result?: never;
        } | {
            err?: never;
            create_session_result?: never;
            place_order_result?: never;
            cancel_order_result?: Receipt.CancelOrderResult;
            deposit_result?: never;
            insert_token_result?: never;
            insert_market_result?: never;
            withdraw_result?: never;
            oracle_symbol_feed_result?: never;
            oracle_update_result?: never;
            update_guardian_set_result?: never;
        } | {
            err?: never;
            create_session_result?: never;
            place_order_result?: never;
            cancel_order_result?: never;
            deposit_result?: Receipt.DepositResult;
            insert_token_result?: never;
            insert_market_result?: never;
            withdraw_result?: never;
            oracle_symbol_feed_result?: never;
            oracle_update_result?: never;
            update_guardian_set_result?: never;
        } | {
            err?: never;
            create_session_result?: never;
            place_order_result?: never;
            cancel_order_result?: never;
            deposit_result?: never;
            insert_token_result?: Receipt.InsertTokenResult;
            insert_market_result?: never;
            withdraw_result?: never;
            oracle_symbol_feed_result?: never;
            oracle_update_result?: never;
            update_guardian_set_result?: never;
        } | {
            err?: never;
            create_session_result?: never;
            place_order_result?: never;
            cancel_order_result?: never;
            deposit_result?: never;
            insert_token_result?: never;
            insert_market_result?: Receipt.InsertMarketResult;
            withdraw_result?: never;
            oracle_symbol_feed_result?: never;
            oracle_update_result?: never;
            update_guardian_set_result?: never;
        } | {
            err?: never;
            create_session_result?: never;
            place_order_result?: never;
            cancel_order_result?: never;
            deposit_result?: never;
            insert_token_result?: never;
            insert_market_result?: never;
            withdraw_result?: Receipt.WithdrawResult;
            oracle_symbol_feed_result?: never;
            oracle_update_result?: never;
            update_guardian_set_result?: never;
        } | {
            err?: never;
            create_session_result?: never;
            place_order_result?: never;
            cancel_order_result?: never;
            deposit_result?: never;
            insert_token_result?: never;
            insert_market_result?: never;
            withdraw_result?: never;
            oracle_symbol_feed_result?: Receipt.OracleSymbolFeedResult;
            oracle_update_result?: never;
            update_guardian_set_result?: never;
        } | {
            err?: never;
            create_session_result?: never;
            place_order_result?: never;
            cancel_order_result?: never;
            deposit_result?: never;
            insert_token_result?: never;
            insert_market_result?: never;
            withdraw_result?: never;
            oracle_symbol_feed_result?: never;
            oracle_update_result?: Receipt.OracleUpdateResult;
            update_guardian_set_result?: never;
        } | {
            err?: never;
            create_session_result?: never;
            place_order_result?: never;
            cancel_order_result?: never;
            deposit_result?: never;
            insert_token_result?: never;
            insert_market_result?: never;
            withdraw_result?: never;
            oracle_symbol_feed_result?: never;
            oracle_update_result?: never;
            update_guardian_set_result?: Receipt.UpdateGuardianSetResult;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("err" in data && data.err != undefined) {
                    this.err = data.err;
                }
                if ("create_session_result" in data && data.create_session_result != undefined) {
                    this.create_session_result = data.create_session_result;
                }
                if ("place_order_result" in data && data.place_order_result != undefined) {
                    this.place_order_result = data.place_order_result;
                }
                if ("cancel_order_result" in data && data.cancel_order_result != undefined) {
                    this.cancel_order_result = data.cancel_order_result;
                }
                if ("deposit_result" in data && data.deposit_result != undefined) {
                    this.deposit_result = data.deposit_result;
                }
                if ("insert_token_result" in data && data.insert_token_result != undefined) {
                    this.insert_token_result = data.insert_token_result;
                }
                if ("insert_market_result" in data && data.insert_market_result != undefined) {
                    this.insert_market_result = data.insert_market_result;
                }
                if ("withdraw_result" in data && data.withdraw_result != undefined) {
                    this.withdraw_result = data.withdraw_result;
                }
                if ("oracle_symbol_feed_result" in data && data.oracle_symbol_feed_result != undefined) {
                    this.oracle_symbol_feed_result = data.oracle_symbol_feed_result;
                }
                if ("oracle_update_result" in data && data.oracle_update_result != undefined) {
                    this.oracle_update_result = data.oracle_update_result;
                }
                if ("update_guardian_set_result" in data && data.update_guardian_set_result != undefined) {
                    this.update_guardian_set_result = data.update_guardian_set_result;
                }
            }
        }
        get err() {
            return pb_1.Message.getFieldWithDefault(this, 1, Error.DUPLICATE) as Error;
        }
        set err(value: Error) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_err() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get create_session_result() {
            return pb_1.Message.getWrapperField(this, Receipt.CreateSessionResult, 2) as Receipt.CreateSessionResult;
        }
        set create_session_result(value: Receipt.CreateSessionResult) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_create_session_result() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get place_order_result() {
            return pb_1.Message.getWrapperField(this, Receipt.PlaceOrderResult, 3) as Receipt.PlaceOrderResult;
        }
        set place_order_result(value: Receipt.PlaceOrderResult) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_place_order_result() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get cancel_order_result() {
            return pb_1.Message.getWrapperField(this, Receipt.CancelOrderResult, 4) as Receipt.CancelOrderResult;
        }
        set cancel_order_result(value: Receipt.CancelOrderResult) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_cancel_order_result() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get deposit_result() {
            return pb_1.Message.getWrapperField(this, Receipt.DepositResult, 5) as Receipt.DepositResult;
        }
        set deposit_result(value: Receipt.DepositResult) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_deposit_result() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get insert_token_result() {
            return pb_1.Message.getWrapperField(this, Receipt.InsertTokenResult, 6) as Receipt.InsertTokenResult;
        }
        set insert_token_result(value: Receipt.InsertTokenResult) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_insert_token_result() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get insert_market_result() {
            return pb_1.Message.getWrapperField(this, Receipt.InsertMarketResult, 7) as Receipt.InsertMarketResult;
        }
        set insert_market_result(value: Receipt.InsertMarketResult) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_insert_market_result() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get withdraw_result() {
            return pb_1.Message.getWrapperField(this, Receipt.WithdrawResult, 8) as Receipt.WithdrawResult;
        }
        set withdraw_result(value: Receipt.WithdrawResult) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_withdraw_result() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get oracle_symbol_feed_result() {
            return pb_1.Message.getWrapperField(this, Receipt.OracleSymbolFeedResult, 9) as Receipt.OracleSymbolFeedResult;
        }
        set oracle_symbol_feed_result(value: Receipt.OracleSymbolFeedResult) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_oracle_symbol_feed_result() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get oracle_update_result() {
            return pb_1.Message.getWrapperField(this, Receipt.OracleUpdateResult, 10) as Receipt.OracleUpdateResult;
        }
        set oracle_update_result(value: Receipt.OracleUpdateResult) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_oracle_update_result() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get update_guardian_set_result() {
            return pb_1.Message.getWrapperField(this, Receipt.UpdateGuardianSetResult, 11) as Receipt.UpdateGuardianSetResult;
        }
        set update_guardian_set_result(value: Receipt.UpdateGuardianSetResult) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_update_guardian_set_result() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get kind() {
            const cases: {
                [index: number]: "none" | "err" | "create_session_result" | "place_order_result" | "cancel_order_result" | "deposit_result" | "insert_token_result" | "insert_market_result" | "withdraw_result" | "oracle_symbol_feed_result" | "oracle_update_result" | "update_guardian_set_result";
            } = {
                0: "none",
                1: "err",
                2: "create_session_result",
                3: "place_order_result",
                4: "cancel_order_result",
                5: "deposit_result",
                6: "insert_token_result",
                7: "insert_market_result",
                8: "withdraw_result",
                9: "oracle_symbol_feed_result",
                10: "oracle_update_result",
                11: "update_guardian_set_result"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])];
        }
        static fromObject(data: {
            err?: Error;
            create_session_result?: ReturnType<typeof Receipt.CreateSessionResult.prototype.toObject>;
            place_order_result?: ReturnType<typeof Receipt.PlaceOrderResult.prototype.toObject>;
            cancel_order_result?: ReturnType<typeof Receipt.CancelOrderResult.prototype.toObject>;
            deposit_result?: ReturnType<typeof Receipt.DepositResult.prototype.toObject>;
            insert_token_result?: ReturnType<typeof Receipt.InsertTokenResult.prototype.toObject>;
            insert_market_result?: ReturnType<typeof Receipt.InsertMarketResult.prototype.toObject>;
            withdraw_result?: ReturnType<typeof Receipt.WithdrawResult.prototype.toObject>;
            oracle_symbol_feed_result?: ReturnType<typeof Receipt.OracleSymbolFeedResult.prototype.toObject>;
            oracle_update_result?: ReturnType<typeof Receipt.OracleUpdateResult.prototype.toObject>;
            update_guardian_set_result?: ReturnType<typeof Receipt.UpdateGuardianSetResult.prototype.toObject>;
        }): Receipt {
            const message = new Receipt({});
            if (data.err != null) {
                message.err = data.err;
            }
            if (data.create_session_result != null) {
                message.create_session_result = Receipt.CreateSessionResult.fromObject(data.create_session_result);
            }
            if (data.place_order_result != null) {
                message.place_order_result = Receipt.PlaceOrderResult.fromObject(data.place_order_result);
            }
            if (data.cancel_order_result != null) {
                message.cancel_order_result = Receipt.CancelOrderResult.fromObject(data.cancel_order_result);
            }
            if (data.deposit_result != null) {
                message.deposit_result = Receipt.DepositResult.fromObject(data.deposit_result);
            }
            if (data.insert_token_result != null) {
                message.insert_token_result = Receipt.InsertTokenResult.fromObject(data.insert_token_result);
            }
            if (data.insert_market_result != null) {
                message.insert_market_result = Receipt.InsertMarketResult.fromObject(data.insert_market_result);
            }
            if (data.withdraw_result != null) {
                message.withdraw_result = Receipt.WithdrawResult.fromObject(data.withdraw_result);
            }
            if (data.oracle_symbol_feed_result != null) {
                message.oracle_symbol_feed_result = Receipt.OracleSymbolFeedResult.fromObject(data.oracle_symbol_feed_result);
            }
            if (data.oracle_update_result != null) {
                message.oracle_update_result = Receipt.OracleUpdateResult.fromObject(data.oracle_update_result);
            }
            if (data.update_guardian_set_result != null) {
                message.update_guardian_set_result = Receipt.UpdateGuardianSetResult.fromObject(data.update_guardian_set_result);
            }
            return message;
        }
        toObject() {
            const data: {
                err?: Error;
                create_session_result?: ReturnType<typeof Receipt.CreateSessionResult.prototype.toObject>;
                place_order_result?: ReturnType<typeof Receipt.PlaceOrderResult.prototype.toObject>;
                cancel_order_result?: ReturnType<typeof Receipt.CancelOrderResult.prototype.toObject>;
                deposit_result?: ReturnType<typeof Receipt.DepositResult.prototype.toObject>;
                insert_token_result?: ReturnType<typeof Receipt.InsertTokenResult.prototype.toObject>;
                insert_market_result?: ReturnType<typeof Receipt.InsertMarketResult.prototype.toObject>;
                withdraw_result?: ReturnType<typeof Receipt.WithdrawResult.prototype.toObject>;
                oracle_symbol_feed_result?: ReturnType<typeof Receipt.OracleSymbolFeedResult.prototype.toObject>;
                oracle_update_result?: ReturnType<typeof Receipt.OracleUpdateResult.prototype.toObject>;
                update_guardian_set_result?: ReturnType<typeof Receipt.UpdateGuardianSetResult.prototype.toObject>;
            } = {};
            if (this.err != null) {
                data.err = this.err;
            }
            if (this.create_session_result != null) {
                data.create_session_result = this.create_session_result.toObject();
            }
            if (this.place_order_result != null) {
                data.place_order_result = this.place_order_result.toObject();
            }
            if (this.cancel_order_result != null) {
                data.cancel_order_result = this.cancel_order_result.toObject();
            }
            if (this.deposit_result != null) {
                data.deposit_result = this.deposit_result.toObject();
            }
            if (this.insert_token_result != null) {
                data.insert_token_result = this.insert_token_result.toObject();
            }
            if (this.insert_market_result != null) {
                data.insert_market_result = this.insert_market_result.toObject();
            }
            if (this.withdraw_result != null) {
                data.withdraw_result = this.withdraw_result.toObject();
            }
            if (this.oracle_symbol_feed_result != null) {
                data.oracle_symbol_feed_result = this.oracle_symbol_feed_result.toObject();
            }
            if (this.oracle_update_result != null) {
                data.oracle_update_result = this.oracle_update_result.toObject();
            }
            if (this.update_guardian_set_result != null) {
                data.update_guardian_set_result = this.update_guardian_set_result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_err)
                writer.writeEnum(1, this.err);
            if (this.has_create_session_result)
                writer.writeMessage(2, this.create_session_result, () => this.create_session_result.serialize(writer));
            if (this.has_place_order_result)
                writer.writeMessage(3, this.place_order_result, () => this.place_order_result.serialize(writer));
            if (this.has_cancel_order_result)
                writer.writeMessage(4, this.cancel_order_result, () => this.cancel_order_result.serialize(writer));
            if (this.has_deposit_result)
                writer.writeMessage(5, this.deposit_result, () => this.deposit_result.serialize(writer));
            if (this.has_insert_token_result)
                writer.writeMessage(6, this.insert_token_result, () => this.insert_token_result.serialize(writer));
            if (this.has_insert_market_result)
                writer.writeMessage(7, this.insert_market_result, () => this.insert_market_result.serialize(writer));
            if (this.has_withdraw_result)
                writer.writeMessage(8, this.withdraw_result, () => this.withdraw_result.serialize(writer));
            if (this.has_oracle_symbol_feed_result)
                writer.writeMessage(9, this.oracle_symbol_feed_result, () => this.oracle_symbol_feed_result.serialize(writer));
            if (this.has_oracle_update_result)
                writer.writeMessage(10, this.oracle_update_result, () => this.oracle_update_result.serialize(writer));
            if (this.has_update_guardian_set_result)
                writer.writeMessage(11, this.update_guardian_set_result, () => this.update_guardian_set_result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Receipt {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Receipt();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.err = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.create_session_result, () => message.create_session_result = Receipt.CreateSessionResult.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.place_order_result, () => message.place_order_result = Receipt.PlaceOrderResult.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.cancel_order_result, () => message.cancel_order_result = Receipt.CancelOrderResult.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.deposit_result, () => message.deposit_result = Receipt.DepositResult.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.insert_token_result, () => message.insert_token_result = Receipt.InsertTokenResult.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.insert_market_result, () => message.insert_market_result = Receipt.InsertMarketResult.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.withdraw_result, () => message.withdraw_result = Receipt.WithdrawResult.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.oracle_symbol_feed_result, () => message.oracle_symbol_feed_result = Receipt.OracleSymbolFeedResult.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.oracle_update_result, () => message.oracle_update_result = Receipt.OracleUpdateResult.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.update_guardian_set_result, () => message.update_guardian_set_result = Receipt.UpdateGuardianSetResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Receipt {
            return Receipt.deserialize(bytes);
        }
    }
    export namespace Receipt {
        export class Posted extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                side?: Side;
                market_id?: number;
                price?: number;
                size?: number;
                order_id?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("side" in data && data.side != undefined) {
                        this.side = data.side;
                    }
                    if ("market_id" in data && data.market_id != undefined) {
                        this.market_id = data.market_id;
                    }
                    if ("price" in data && data.price != undefined) {
                        this.price = data.price;
                    }
                    if ("size" in data && data.size != undefined) {
                        this.size = data.size;
                    }
                    if ("order_id" in data && data.order_id != undefined) {
                        this.order_id = data.order_id;
                    }
                }
            }
            get side() {
                return pb_1.Message.getFieldWithDefault(this, 1, Side.ASK) as Side;
            }
            set side(value: Side) {
                pb_1.Message.setField(this, 1, value);
            }
            get market_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set market_id(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get price() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set price(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get size() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set size(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get order_id() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set order_id(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                side?: Side;
                market_id?: number;
                price?: number;
                size?: number;
                order_id?: number;
            }): Posted {
                const message = new Posted({});
                if (data.side != null) {
                    message.side = data.side;
                }
                if (data.market_id != null) {
                    message.market_id = data.market_id;
                }
                if (data.price != null) {
                    message.price = data.price;
                }
                if (data.size != null) {
                    message.size = data.size;
                }
                if (data.order_id != null) {
                    message.order_id = data.order_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    side?: Side;
                    market_id?: number;
                    price?: number;
                    size?: number;
                    order_id?: number;
                } = {};
                if (this.side != null) {
                    data.side = this.side;
                }
                if (this.market_id != null) {
                    data.market_id = this.market_id;
                }
                if (this.price != null) {
                    data.price = this.price;
                }
                if (this.size != null) {
                    data.size = this.size;
                }
                if (this.order_id != null) {
                    data.order_id = this.order_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.side != Side.ASK)
                    writer.writeEnum(1, this.side);
                if (this.market_id != 0)
                    writer.writeUint32(2, this.market_id);
                if (this.price != 0)
                    writer.writeUint64(3, this.price);
                if (this.size != 0)
                    writer.writeUint64(4, this.size);
                if (this.order_id != 0)
                    writer.writeUint64(5, this.order_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Posted {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Posted();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.side = reader.readEnum();
                            break;
                        case 2:
                            message.market_id = reader.readUint32();
                            break;
                        case 3:
                            message.price = reader.readUint64();
                            break;
                        case 4:
                            message.size = reader.readUint64();
                            break;
                        case 5:
                            message.order_id = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Posted {
                return Posted.deserialize(bytes);
            }
        }
        export class Trade extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                order_id?: number;
                price?: number;
                size?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("order_id" in data && data.order_id != undefined) {
                        this.order_id = data.order_id;
                    }
                    if ("price" in data && data.price != undefined) {
                        this.price = data.price;
                    }
                    if ("size" in data && data.size != undefined) {
                        this.size = data.size;
                    }
                }
            }
            get order_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set order_id(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get price() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set price(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get size() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set size(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                order_id?: number;
                price?: number;
                size?: number;
            }): Trade {
                const message = new Trade({});
                if (data.order_id != null) {
                    message.order_id = data.order_id;
                }
                if (data.price != null) {
                    message.price = data.price;
                }
                if (data.size != null) {
                    message.size = data.size;
                }
                return message;
            }
            toObject() {
                const data: {
                    order_id?: number;
                    price?: number;
                    size?: number;
                } = {};
                if (this.order_id != null) {
                    data.order_id = this.order_id;
                }
                if (this.price != null) {
                    data.price = this.price;
                }
                if (this.size != null) {
                    data.size = this.size;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.order_id != 0)
                    writer.writeUint64(2, this.order_id);
                if (this.price != 0)
                    writer.writeUint64(4, this.price);
                if (this.size != 0)
                    writer.writeUint64(5, this.size);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Trade {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Trade();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 2:
                            message.order_id = reader.readUint64();
                            break;
                        case 4:
                            message.price = reader.readUint64();
                            break;
                        case 5:
                            message.size = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Trade {
                return Trade.deserialize(bytes);
            }
        }
        export class CreateSessionResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                session_id?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("session_id" in data && data.session_id != undefined) {
                        this.session_id = data.session_id;
                    }
                }
            }
            get session_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set session_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                session_id?: number;
            }): CreateSessionResult {
                const message = new CreateSessionResult({});
                if (data.session_id != null) {
                    message.session_id = data.session_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    session_id?: number;
                } = {};
                if (this.session_id != null) {
                    data.session_id = this.session_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.session_id != 0)
                    writer.writeUint64(1, this.session_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSessionResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSessionResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.session_id = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CreateSessionResult {
                return CreateSessionResult.deserialize(bytes);
            }
        }
        export class PlaceOrderResult extends pb_1.Message {
            #one_of_decls: number[][] = [[1]];
            constructor(data?: any[] | ({
                fills?: Receipt.Trade[];
            } & (({
                posted?: Receipt.Posted;
            })))) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("posted" in data && data.posted != undefined) {
                        this.posted = data.posted;
                    }
                    if ("fills" in data && data.fills != undefined) {
                        this.fills = data.fills;
                    }
                }
            }
            get posted() {
                return pb_1.Message.getWrapperField(this, Receipt.Posted, 1) as Receipt.Posted;
            }
            set posted(value: Receipt.Posted) {
                pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
            }
            get has_posted() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get fills() {
                return pb_1.Message.getRepeatedWrapperField(this, Receipt.Trade, 2) as Receipt.Trade[];
            }
            set fills(value: Receipt.Trade[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get _posted() {
                const cases: {
                    [index: number]: "none" | "posted";
                } = {
                    0: "none",
                    1: "posted"
                };
                return cases[pb_1.Message.computeOneofCase(this, [1])];
            }
            static fromObject(data: {
                posted?: ReturnType<typeof Receipt.Posted.prototype.toObject>;
                fills?: ReturnType<typeof Receipt.Trade.prototype.toObject>[];
            }): PlaceOrderResult {
                const message = new PlaceOrderResult({});
                if (data.posted != null) {
                    message.posted = Receipt.Posted.fromObject(data.posted);
                }
                if (data.fills != null) {
                    message.fills = data.fills.map(item => Receipt.Trade.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    posted?: ReturnType<typeof Receipt.Posted.prototype.toObject>;
                    fills?: ReturnType<typeof Receipt.Trade.prototype.toObject>[];
                } = {};
                if (this.posted != null) {
                    data.posted = this.posted.toObject();
                }
                if (this.fills != null) {
                    data.fills = this.fills.map((item: Receipt.Trade) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_posted)
                    writer.writeMessage(1, this.posted, () => this.posted.serialize(writer));
                if (this.fills.length)
                    writer.writeRepeatedMessage(2, this.fills, (item: Receipt.Trade) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlaceOrderResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlaceOrderResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.posted, () => message.posted = Receipt.Posted.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.fills, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Receipt.Trade.deserialize(reader), Receipt.Trade));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PlaceOrderResult {
                return PlaceOrderResult.deserialize(bytes);
            }
        }
        export class CancelOrderResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                order_id?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("order_id" in data && data.order_id != undefined) {
                        this.order_id = data.order_id;
                    }
                }
            }
            get order_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set order_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                order_id?: number;
            }): CancelOrderResult {
                const message = new CancelOrderResult({});
                if (data.order_id != null) {
                    message.order_id = data.order_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    order_id?: number;
                } = {};
                if (this.order_id != null) {
                    data.order_id = this.order_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.order_id != 0)
                    writer.writeUint64(1, this.order_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelOrderResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelOrderResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.order_id = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CancelOrderResult {
                return CancelOrderResult.deserialize(bytes);
            }
        }
        export class DepositResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                token_id?: number;
                new_amount?: number;
                user_id?: number;
                user_created?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("token_id" in data && data.token_id != undefined) {
                        this.token_id = data.token_id;
                    }
                    if ("new_amount" in data && data.new_amount != undefined) {
                        this.new_amount = data.new_amount;
                    }
                    if ("user_id" in data && data.user_id != undefined) {
                        this.user_id = data.user_id;
                    }
                    if ("user_created" in data && data.user_created != undefined) {
                        this.user_created = data.user_created;
                    }
                }
            }
            get token_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set token_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get new_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set new_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get user_id() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set user_id(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get user_created() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set user_created(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                token_id?: number;
                new_amount?: number;
                user_id?: number;
                user_created?: boolean;
            }): DepositResult {
                const message = new DepositResult({});
                if (data.token_id != null) {
                    message.token_id = data.token_id;
                }
                if (data.new_amount != null) {
                    message.new_amount = data.new_amount;
                }
                if (data.user_id != null) {
                    message.user_id = data.user_id;
                }
                if (data.user_created != null) {
                    message.user_created = data.user_created;
                }
                return message;
            }
            toObject() {
                const data: {
                    token_id?: number;
                    new_amount?: number;
                    user_id?: number;
                    user_created?: boolean;
                } = {};
                if (this.token_id != null) {
                    data.token_id = this.token_id;
                }
                if (this.new_amount != null) {
                    data.new_amount = this.new_amount;
                }
                if (this.user_id != null) {
                    data.user_id = this.user_id;
                }
                if (this.user_created != null) {
                    data.user_created = this.user_created;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.token_id != 0)
                    writer.writeUint32(1, this.token_id);
                if (this.new_amount != 0)
                    writer.writeUint64(2, this.new_amount);
                if (this.user_id != 0)
                    writer.writeUint32(3, this.user_id);
                if (this.user_created != false)
                    writer.writeBool(4, this.user_created);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DepositResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DepositResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.token_id = reader.readUint32();
                            break;
                        case 2:
                            message.new_amount = reader.readUint64();
                            break;
                        case 3:
                            message.user_id = reader.readUint32();
                            break;
                        case 4:
                            message.user_created = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DepositResult {
                return DepositResult.deserialize(bytes);
            }
        }
        export class InsertTokenResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                chain_addr?: Uint8Array;
                token?: Token;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("chain_addr" in data && data.chain_addr != undefined) {
                        this.chain_addr = data.chain_addr;
                    }
                    if ("token" in data && data.token != undefined) {
                        this.token = data.token;
                    }
                }
            }
            get chain_addr() {
                return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
            }
            set chain_addr(value: Uint8Array) {
                pb_1.Message.setField(this, 1, value);
            }
            get token() {
                return pb_1.Message.getWrapperField(this, Token, 2) as Token;
            }
            set token(value: Token) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_token() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                chain_addr?: Uint8Array;
                token?: ReturnType<typeof Token.prototype.toObject>;
            }): InsertTokenResult {
                const message = new InsertTokenResult({});
                if (data.chain_addr != null) {
                    message.chain_addr = data.chain_addr;
                }
                if (data.token != null) {
                    message.token = Token.fromObject(data.token);
                }
                return message;
            }
            toObject() {
                const data: {
                    chain_addr?: Uint8Array;
                    token?: ReturnType<typeof Token.prototype.toObject>;
                } = {};
                if (this.chain_addr != null) {
                    data.chain_addr = this.chain_addr;
                }
                if (this.token != null) {
                    data.token = this.token.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.chain_addr.length)
                    writer.writeBytes(1, this.chain_addr);
                if (this.has_token)
                    writer.writeMessage(2, this.token, () => this.token.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InsertTokenResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InsertTokenResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.chain_addr = reader.readBytes();
                            break;
                        case 2:
                            reader.readMessage(message.token, () => message.token = Token.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): InsertTokenResult {
                return InsertTokenResult.deserialize(bytes);
            }
        }
        export class InsertMarketResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                market?: Market;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("market" in data && data.market != undefined) {
                        this.market = data.market;
                    }
                }
            }
            get market() {
                return pb_1.Message.getWrapperField(this, Market, 1) as Market;
            }
            set market(value: Market) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_market() {
                return pb_1.Message.getField(this, 1) != null;
            }
            static fromObject(data: {
                market?: ReturnType<typeof Market.prototype.toObject>;
            }): InsertMarketResult {
                const message = new InsertMarketResult({});
                if (data.market != null) {
                    message.market = Market.fromObject(data.market);
                }
                return message;
            }
            toObject() {
                const data: {
                    market?: ReturnType<typeof Market.prototype.toObject>;
                } = {};
                if (this.market != null) {
                    data.market = this.market.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_market)
                    writer.writeMessage(1, this.market, () => this.market.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InsertMarketResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InsertMarketResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.market, () => message.market = Market.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): InsertMarketResult {
                return InsertMarketResult.deserialize(bytes);
            }
        }
        export class WithdrawResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                token_id?: number;
                amount?: number;
                balance?: number;
                user_id?: number;
                user_pubkey?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("token_id" in data && data.token_id != undefined) {
                        this.token_id = data.token_id;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                    if ("balance" in data && data.balance != undefined) {
                        this.balance = data.balance;
                    }
                    if ("user_id" in data && data.user_id != undefined) {
                        this.user_id = data.user_id;
                    }
                    if ("user_pubkey" in data && data.user_pubkey != undefined) {
                        this.user_pubkey = data.user_pubkey;
                    }
                }
            }
            get token_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set token_id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get balance() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set balance(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get user_id() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set user_id(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get user_pubkey() {
                return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
            }
            set user_pubkey(value: Uint8Array) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                token_id?: number;
                amount?: number;
                balance?: number;
                user_id?: number;
                user_pubkey?: Uint8Array;
            }): WithdrawResult {
                const message = new WithdrawResult({});
                if (data.token_id != null) {
                    message.token_id = data.token_id;
                }
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                if (data.balance != null) {
                    message.balance = data.balance;
                }
                if (data.user_id != null) {
                    message.user_id = data.user_id;
                }
                if (data.user_pubkey != null) {
                    message.user_pubkey = data.user_pubkey;
                }
                return message;
            }
            toObject() {
                const data: {
                    token_id?: number;
                    amount?: number;
                    balance?: number;
                    user_id?: number;
                    user_pubkey?: Uint8Array;
                } = {};
                if (this.token_id != null) {
                    data.token_id = this.token_id;
                }
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                if (this.balance != null) {
                    data.balance = this.balance;
                }
                if (this.user_id != null) {
                    data.user_id = this.user_id;
                }
                if (this.user_pubkey != null) {
                    data.user_pubkey = this.user_pubkey;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.token_id != 0)
                    writer.writeUint32(1, this.token_id);
                if (this.amount != 0)
                    writer.writeUint64(2, this.amount);
                if (this.balance != 0)
                    writer.writeUint64(3, this.balance);
                if (this.user_id != 0)
                    writer.writeUint32(4, this.user_id);
                if (this.user_pubkey.length)
                    writer.writeBytes(5, this.user_pubkey);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WithdrawResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.token_id = reader.readUint32();
                            break;
                        case 2:
                            message.amount = reader.readUint64();
                            break;
                        case 3:
                            message.balance = reader.readUint64();
                            break;
                        case 4:
                            message.user_id = reader.readUint32();
                            break;
                        case 5:
                            message.user_pubkey = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): WithdrawResult {
                return WithdrawResult.deserialize(bytes);
            }
        }
        export class OracleSymbolFeedResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                oracle_symbol?: string;
                feed_id?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("oracle_symbol" in data && data.oracle_symbol != undefined) {
                        this.oracle_symbol = data.oracle_symbol;
                    }
                    if ("feed_id" in data && data.feed_id != undefined) {
                        this.feed_id = data.feed_id;
                    }
                }
            }
            get oracle_symbol() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set oracle_symbol(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get feed_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
            }
            set feed_id(value: Uint8Array) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                oracle_symbol?: string;
                feed_id?: Uint8Array;
            }): OracleSymbolFeedResult {
                const message = new OracleSymbolFeedResult({});
                if (data.oracle_symbol != null) {
                    message.oracle_symbol = data.oracle_symbol;
                }
                if (data.feed_id != null) {
                    message.feed_id = data.feed_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    oracle_symbol?: string;
                    feed_id?: Uint8Array;
                } = {};
                if (this.oracle_symbol != null) {
                    data.oracle_symbol = this.oracle_symbol;
                }
                if (this.feed_id != null) {
                    data.feed_id = this.feed_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.oracle_symbol.length)
                    writer.writeString(1, this.oracle_symbol);
                if (this.feed_id.length)
                    writer.writeBytes(2, this.feed_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OracleSymbolFeedResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OracleSymbolFeedResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.oracle_symbol = reader.readString();
                            break;
                        case 2:
                            message.feed_id = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): OracleSymbolFeedResult {
                return OracleSymbolFeedResult.deserialize(bytes);
            }
        }
        export class OracleUpdateResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                timestamp?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("timestamp" in data && data.timestamp != undefined) {
                        this.timestamp = data.timestamp;
                    }
                }
            }
            get timestamp() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set timestamp(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                timestamp?: number;
            }): OracleUpdateResult {
                const message = new OracleUpdateResult({});
                if (data.timestamp != null) {
                    message.timestamp = data.timestamp;
                }
                return message;
            }
            toObject() {
                const data: {
                    timestamp?: number;
                } = {};
                if (this.timestamp != null) {
                    data.timestamp = this.timestamp;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.timestamp != 0)
                    writer.writeInt64(1, this.timestamp);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OracleUpdateResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OracleUpdateResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.timestamp = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): OracleUpdateResult {
                return OracleUpdateResult.deserialize(bytes);
            }
        }
        export class UpdateGuardianSetResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                guardian_set_index?: number;
                addresses?: Uint8Array[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("guardian_set_index" in data && data.guardian_set_index != undefined) {
                        this.guardian_set_index = data.guardian_set_index;
                    }
                    if ("addresses" in data && data.addresses != undefined) {
                        this.addresses = data.addresses;
                    }
                }
            }
            get guardian_set_index() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set guardian_set_index(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get addresses() {
                return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
            }
            set addresses(value: Uint8Array[]) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                guardian_set_index?: number;
                addresses?: Uint8Array[];
            }): UpdateGuardianSetResult {
                const message = new UpdateGuardianSetResult({});
                if (data.guardian_set_index != null) {
                    message.guardian_set_index = data.guardian_set_index;
                }
                if (data.addresses != null) {
                    message.addresses = data.addresses;
                }
                return message;
            }
            toObject() {
                const data: {
                    guardian_set_index?: number;
                    addresses?: Uint8Array[];
                } = {};
                if (this.guardian_set_index != null) {
                    data.guardian_set_index = this.guardian_set_index;
                }
                if (this.addresses != null) {
                    data.addresses = this.addresses;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.guardian_set_index != 0)
                    writer.writeUint32(1, this.guardian_set_index);
                if (this.addresses.length)
                    writer.writeRepeatedBytes(2, this.addresses);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateGuardianSetResult {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateGuardianSetResult();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.guardian_set_index = reader.readUint32();
                            break;
                        case 2:
                            pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): UpdateGuardianSetResult {
                return UpdateGuardianSetResult.deserialize(bytes);
            }
        }
    }
}
