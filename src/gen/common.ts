// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.28.3
// source: common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "common";

export interface Message {
  kind?:
    | //
    /**
     * there are many things to come here, that why enum,
     * from list abi calls, nfts, multi asset transfer
     */
    { $case: "transfer"; value: Message_Transfer }
    | undefined;
}

/**
 * Message sent by user to app to move funds out of app, `withdraw`.
 * Receiver side considers it `route` or `deposit`.
 */
export interface Message_Transfer {
  /** Token id as registered on L1 chain settlement */
  tokenId: number;
  /**
   * User public key from L1 which he used for deposits
   * This address will be used to deposit onto L1 or L2 target,
   * Target is "here", as soon as ther are no `channel_id`s remaining.
   */
  userPubkey: Uint8Array;
  amount: bigint;
  /**
   * Numeric identifiers of channels to traverse.
   *
   * Message removed first channel_id in list,
   * and sent remaining message to "removed" channel.
   *
   * If received by app via channel and no channels defined,
   * deposit target this app ("here").
   *
   * If it is direct user input and no channels defined, default route is used:  q
   * to Gate on Nord, to L1 on Gate, and to Gate on L1.
   */
  channelId: number[];
}

function createBaseMessage(): Message {
  return { kind: undefined };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.kind?.$case) {
      case "transfer":
        Message_Transfer.encode(message.kind.value, writer.uint32(10).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.kind = { $case: "transfer", value: Message_Transfer.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return {
      kind: isSet(object.transfer)
        ? { $case: "transfer", value: Message_Transfer.fromJSON(object.transfer) }
        : undefined,
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.kind?.$case === "transfer") {
      obj.transfer = Message_Transfer.toJSON(message.kind.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage();
    switch (object.kind?.$case) {
      case "transfer": {
        if (object.kind?.value !== undefined && object.kind?.value !== null) {
          message.kind = { $case: "transfer", value: Message_Transfer.fromPartial(object.kind.value) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseMessage_Transfer(): Message_Transfer {
  return { tokenId: 0, userPubkey: new Uint8Array(0), amount: 0n, channelId: [] };
}

export const Message_Transfer: MessageFns<Message_Transfer> = {
  encode(message: Message_Transfer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tokenId !== 0) {
      writer.uint32(8).uint32(message.tokenId);
    }
    if (message.userPubkey.length !== 0) {
      writer.uint32(18).bytes(message.userPubkey);
    }
    if (message.amount !== 0n) {
      if (BigInt.asUintN(64, message.amount) !== message.amount) {
        throw new globalThis.Error("value provided for field message.amount of type uint64 too large");
      }
      writer.uint32(24).uint64(message.amount);
    }
    writer.uint32(58).fork();
    for (const v of message.channelId) {
      writer.uint32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_Transfer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_Transfer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.tokenId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userPubkey = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = reader.uint64() as bigint;
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.channelId.push(reader.uint32());

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.channelId.push(reader.uint32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_Transfer {
    return {
      tokenId: isSet(object.tokenId) ? globalThis.Number(object.tokenId) : 0,
      userPubkey: isSet(object.userPubkey) ? bytesFromBase64(object.userPubkey) : new Uint8Array(0),
      amount: isSet(object.amount) ? BigInt(object.amount) : 0n,
      channelId: globalThis.Array.isArray(object?.channelId)
        ? object.channelId.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: Message_Transfer): unknown {
    const obj: any = {};
    if (message.tokenId !== 0) {
      obj.tokenId = Math.round(message.tokenId);
    }
    if (message.userPubkey.length !== 0) {
      obj.userPubkey = base64FromBytes(message.userPubkey);
    }
    if (message.amount !== 0n) {
      obj.amount = message.amount.toString();
    }
    if (message.channelId?.length) {
      obj.channelId = message.channelId.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_Transfer>, I>>(base?: I): Message_Transfer {
    return Message_Transfer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_Transfer>, I>>(object: I): Message_Transfer {
    const message = createBaseMessage_Transfer();
    message.tokenId = object.tokenId ?? 0;
    message.userPubkey = object.userPubkey ?? new Uint8Array(0);
    message.amount = object.amount ?? 0n;
    message.channelId = object.channelId?.map((e) => e) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
